import{_ as d,r as e,o as k,c as t,a as h,d as s,e as a,b as r,w as i,f as o}from"./app-CkKBrMyO.js";const B={},y=s("p",null,"SpringBoot 定时任务调度",-1),E=s("p",null,"参考：",-1),u=s("code",null,"@Scheduled",-1),A={href:"https://springdoc.cn/spring-scheduled-tasks/",target:"_blank",rel:"noopener noreferrer"},C=o(`<h2 id="配置方式" tabindex="-1"><a class="header-anchor" href="#配置方式"><span>配置方式</span></a></h2><p>在 SpringBoot 中可以通过下面两步来开启一个定时任务：</p><ol><li>在配置类上添加 <code>@EnableScheduling</code> 注解来启动定时任务功能</li><li>在方法上添加  <code>@Scheduled</code>  注解来定义一个定时任务</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="color:#D73A49;--shiki-dark:#E5C07B;">Component</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="color:#D73A49;--shiki-dark:#E5C07B;">EnableScheduling</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">public</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="color:#6F42C1;--shiki-dark:#E5C07B;"> SecondScheduledTaskDemo</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    private</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> static</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> final</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> Logger</span><span style="color:#24292E;--shiki-dark:#E06C75;"> logger </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> LoggerFactory</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">getLogger</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#24292E;--shiki-dark:#E5C07B;">ScheduledTaskDemo</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E5C07B;">class</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    @</span><span style="color:#D73A49;--shiki-dark:#E5C07B;">Scheduled</span><span style="color:#24292E;--shiki-dark:#E06C75;">(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">cron</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#032F62;--shiki-dark:#98C379;"> &quot;0/10 * * * * *&quot;</span><span style="color:#24292E;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> second</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">()</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">        logger</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">info</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#032F62;--shiki-dark:#98C379;">&quot;Second scheduled task is starting... ...&quot;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">        logger</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">info</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#032F62;--shiki-dark:#98C379;">&quot;Second scheduled task is ending... ...&quot;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="调度策略" tabindex="-1"><a class="header-anchor" href="#调度策略"><span>调度策略</span></a></h2><h3 id="以固定延迟调度任务" tabindex="-1"><a class="header-anchor" href="#以固定延迟调度任务"><span>以固定延迟调度任务</span></a></h3><p>配置一个任务，使其在固定延迟后运行：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="color:#D73A49;--shiki-dark:#E5C07B;">Scheduled</span><span style="color:#24292E;--shiki-dark:#E06C75;">(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">fixedDelay</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> 1000</span><span style="color:#24292E;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">public</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> scheduleFixedDelayTask</span><span style="color:#24292E;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">    System</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E5C07B;">out</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#032F62;--shiki-dark:#98C379;">      &quot;Fixed delay task - &quot;</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> System</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">currentTimeMillis</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">() </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> 1000</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上，上一次执行结束与下一次执行开始之间的持续时间是固定的。任务会一直等待到前一个任务结束。</p><p>在必须确保上一次执行完成后再次运行的情况下，应使用此选项。</p><h3 id="以固定频率调度任务" tabindex="-1"><a class="header-anchor" href="#以固定频率调度任务"><span>以固定频率调度任务</span></a></h3><p>在固定的时间间隔内执行一项任务：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="color:#D73A49;--shiki-dark:#E5C07B;">Scheduled</span><span style="color:#24292E;--shiki-dark:#E06C75;">(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">fixedRate</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> 1000</span><span style="color:#24292E;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">public</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> scheduleFixedRateTask</span><span style="color:#24292E;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">    System</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E5C07B;">out</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#032F62;--shiki-dark:#98C379;">      &quot;Fixed rate task - &quot;</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> System</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">currentTimeMillis</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">() </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> 1000</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果任务的每次执行都是独立的，则应使用该选项。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>定时任务默认情况下不会并行运行。 因此，即使使用了 fixedRate，在前一个任务完成之前也不会调用下一个任务。</p><p>如果想在定时任务中支持并行行为，就需要添加 <code>@Async</code> 注解：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="color:#D73A49;--shiki-dark:#E5C07B;">EnableAsync</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">public</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="color:#6F42C1;--shiki-dark:#E5C07B;"> ScheduledFixedRateExample</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    @</span><span style="color:#D73A49;--shiki-dark:#E5C07B;">Async</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    @</span><span style="color:#D73A49;--shiki-dark:#E5C07B;">Scheduled</span><span style="color:#24292E;--shiki-dark:#E06C75;">(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">fixedRate</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> 1000</span><span style="color:#24292E;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> scheduleFixedRateTaskAsync</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">()</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> throws</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> InterruptedException</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">        System</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E5C07B;">out</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#032F62;--shiki-dark:#98C379;">          &quot;Fixed rate task async - &quot;</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> System</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">currentTimeMillis</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">() </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> 1000</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">        Thread</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">sleep</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">2000</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，即使前一项任务尚未完成，这项异步任务也会每秒被调用一次。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>需要确保不会超出内存和线程池的大小，如果传入的任务不能很快完成，有可能出现 “Out of Memory exception”。</p></div></div><h3 id="使用-cron-表达式调度任务" tabindex="-1"><a class="header-anchor" href="#使用-cron-表达式调度任务"><span>使用 Cron 表达式调度任务</span></a></h3><p>使用 cron 表达式的灵活性来控制任务的时间表：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="color:#D73A49;--shiki-dark:#E5C07B;">Scheduled</span><span style="color:#24292E;--shiki-dark:#E06C75;">(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">cron</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#032F62;--shiki-dark:#98C379;"> &quot;0 15 10 15 * ?&quot;</span><span style="color:#24292E;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">public</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> scheduleTaskUsingCronExpression</span><span style="color:#24292E;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    long</span><span style="color:#24292E;--shiki-dark:#E06C75;"> now </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> System</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">currentTimeMillis</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">()</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> /</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> 1000</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">    System</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E5C07B;">out</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#032F62;--shiki-dark:#98C379;">      &quot;schedule tasks using cron jobs - &quot;</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> now);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>默认情况下，Spring 使用服务器的本地时区作为 cron 表达式的时区。不过，可以使用 zone 属性来更改时区：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="color:#D73A49;--shiki-dark:#E5C07B;">Scheduled</span><span style="color:#24292E;--shiki-dark:#E06C75;">(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">cron</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#032F62;--shiki-dark:#98C379;"> &quot;0 15 10 15 * ?&quot;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> zone</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#032F62;--shiki-dark:#98C379;"> &quot;Europe/Paris&quot;</span><span style="color:#24292E;--shiki-dark:#E06C75;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><h2 id="参数化" tabindex="-1"><a class="header-anchor" href="#参数化"><span>参数化</span></a></h2><p>fixedDelay 任务：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="color:#D73A49;--shiki-dark:#E5C07B;">Scheduled</span><span style="color:#24292E;--shiki-dark:#E06C75;">(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">fixedDelayString</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#032F62;--shiki-dark:#98C379;"> &quot;\${fixedDelay.in.milliseconds}&quot;</span><span style="color:#24292E;--shiki-dark:#E06C75;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>fixedRate 任务：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="color:#D73A49;--shiki-dark:#E5C07B;">Scheduled</span><span style="color:#24292E;--shiki-dark:#E06C75;">(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">fixedRateString</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#032F62;--shiki-dark:#98C379;"> &quot;\${fixedRate.in.milliseconds}&quot;</span><span style="color:#24292E;--shiki-dark:#E06C75;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>基于 cron 表达式的任务：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="color:#D73A49;--shiki-dark:#E5C07B;">Scheduled</span><span style="color:#24292E;--shiki-dark:#E06C75;">(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">cron</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#032F62;--shiki-dark:#98C379;"> &quot;\${cron.expression}&quot;</span><span style="color:#24292E;--shiki-dark:#E06C75;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="配置原理" tabindex="-1"><a class="header-anchor" href="#配置原理"><span>配置原理</span></a></h2><p>参考： https://blog.csdn.net/z69183787/article/details/115543858</p><ul><li><p>基于  <code>@Scheduled</code> 的定时任务，会在 bean 实例化阶段 的   <code>BeanPostProcessor</code>（具体： <code>ScheduledAnnotationBeanPostProcessor</code>  的 <code>postProcessAfterInitialization</code> 方法）将所有 <code>@Scheduled</code> 注解的方法检测出来，加入各个任务队列之中。</p></li><li><p>基于 <code>ScheduledThreadPoolExecutor</code> 的定时任务，内部基于 <code>DelayQueue</code> 调度，每次任务执行完成之后会计算是否需要下次执行，以及下次执行的时间，然后将任务在放入队列之中。</p></li></ul><h2 id="配置线程池" tabindex="-1"><a class="header-anchor" href="#配置线程池"><span>配置线程池</span></a></h2><p>SpringBoot Schedule 默认单线程执行。这可能由于线程阻塞导致任务延迟。</p><p>配置线程池，开启多线程任务调度：（下面多种配置方法选一个）</p>`,32),F=s("p",null,"在 TaskScheduler 中设置线程池大小",-1),v=s("div",{class:"language-java line-numbers-mode","data-ext":"java","data-title":"java"},[s("pre",{class:"shiki shiki-themes github-light one-dark-pro",style:{"background-color":"#fff","--shiki-dark-bg":"#282c34",color:"#24292e","--shiki-dark":"#abb2bf"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"@"),s("span",{style:{color:"#D73A49","--shiki-dark":"#E5C07B"}},"Configuration")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}},"public"),s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}}," class"),s("span",{style:{color:"#6F42C1","--shiki-dark":"#E5C07B"}}," ScheduleConfig"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A737D","--shiki-dark":"#7F848E","font-style":"inherit","--shiki-dark-font-style":"italic"}},"    /**")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A737D","--shiki-dark":"#7F848E","font-style":"inherit","--shiki-dark-font-style":"italic"}},"     * 修复同一时间无法执行多个定时任务问题。@Scheduled默认是单线程的")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A737D","--shiki-dark":"#7F848E","font-style":"inherit","--shiki-dark-font-style":"italic"}},"     */")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"    @"),s("span",{style:{color:"#D73A49","--shiki-dark":"#E5C07B"}},"Bean")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}},"    public"),s("span",{style:{color:"#24292E","--shiki-dark":"#E5C07B"}}," TaskScheduler"),s("span",{style:{color:"#6F42C1","--shiki-dark":"#61AFEF"}}," taskScheduler"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"()"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#E5C07B"}},"        ThreadPoolTaskScheduler"),s("span",{style:{color:"#24292E","--shiki-dark":"#E06C75"}}," taskScheduler"),s("span",{style:{color:"#D73A49","--shiki-dark":"#56B6C2"}}," ="),s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}}," new"),s("span",{style:{color:"#6F42C1","--shiki-dark":"#61AFEF"}}," ThreadPoolTaskScheduler"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"();")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A737D","--shiki-dark":"#7F848E","font-style":"inherit","--shiki-dark-font-style":"italic"}},"        //核心线程池数量，方法: 返回可用处理器的Java虚拟机的数量。")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#E5C07B"}},"        taskScheduler"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"."),s("span",{style:{color:"#6F42C1","--shiki-dark":"#61AFEF"}},"setPoolSize"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"("),s("span",{style:{color:"#24292E","--shiki-dark":"#E5C07B"}},"Runtime"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"."),s("span",{style:{color:"#6F42C1","--shiki-dark":"#61AFEF"}},"getRuntime"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"()."),s("span",{style:{color:"#6F42C1","--shiki-dark":"#61AFEF"}},"availableProcessors"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"() "),s("span",{style:{color:"#D73A49","--shiki-dark":"#56B6C2"}},"*"),s("span",{style:{color:"#005CC5","--shiki-dark":"#D19A66"}}," 2"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},");")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}},"        return"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}}," taskScheduler;")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"    }")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"}")]),a(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),b=s("p",null,[s("s",null,"或者在 ScheduledExecutorService 中设置线程池大小")],-1),D=s("div",{class:"language-java line-numbers-mode","data-ext":"java","data-title":"java"},[s("pre",{class:"shiki shiki-themes github-light one-dark-pro",style:{"background-color":"#fff","--shiki-dark-bg":"#282c34",color:"#24292e","--shiki-dark":"#abb2bf"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"@"),s("span",{style:{color:"#D73A49","--shiki-dark":"#E5C07B"}},"Bean")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}},"public"),s("span",{style:{color:"#24292E","--shiki-dark":"#E5C07B"}}," ScheduledExecutorService"),s("span",{style:{color:"#6F42C1","--shiki-dark":"#61AFEF"}}," scheduledExecutorService"),s("span",{style:{color:"#24292E","--shiki-dark":"#E06C75"}},"() {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}},"    return"),s("span",{style:{color:"#24292E","--shiki-dark":"#E5C07B"}}," Executors"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"."),s("span",{style:{color:"#6F42C1","--shiki-dark":"#61AFEF"}},"newScheduledThreadPool"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"("),s("span",{style:{color:"#005CC5","--shiki-dark":"#D19A66"}},"10"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},");")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#E06C75"}},"}")]),a(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),m=s("div",{class:"language-java line-numbers-mode","data-ext":"java","data-title":"java"},[s("pre",{class:"shiki shiki-themes github-light one-dark-pro",style:{"background-color":"#fff","--shiki-dark-bg":"#282c34",color:"#24292e","--shiki-dark":"#abb2bf"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"@"),s("span",{style:{color:"#D73A49","--shiki-dark":"#E5C07B"}},"Configuration")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}},"public"),s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}}," class"),s("span",{style:{color:"#6F42C1","--shiki-dark":"#E5C07B"}}," ScheduledTaskConfiguration"),s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}}," implements"),s("span",{style:{color:"#6F42C1","--shiki-dark":"#E5C07B"}}," SchedulingConfigurer"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}}," {")]),a(`
`),s("span",{class:"line"}),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"    @"),s("span",{style:{color:"#D73A49","--shiki-dark":"#E5C07B"}},"Override")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}},"    public"),s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}}," void"),s("span",{style:{color:"#6F42C1","--shiki-dark":"#61AFEF"}}," configureTasks"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"("),s("span",{style:{color:"#24292E","--shiki-dark":"#E5C07B"}},"ScheduledTaskRegistrar"),s("span",{style:{color:"#E36209","--shiki-dark":"#E06C75","font-style":"inherit","--shiki-dark-font-style":"italic"}}," taskRegistrar"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},")"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}},"        final"),s("span",{style:{color:"#24292E","--shiki-dark":"#E5C07B"}}," ThreadPoolTaskScheduler"),s("span",{style:{color:"#24292E","--shiki-dark":"#E06C75"}}," taskScheduler"),s("span",{style:{color:"#D73A49","--shiki-dark":"#56B6C2"}}," ="),s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}}," new"),s("span",{style:{color:"#6F42C1","--shiki-dark":"#61AFEF"}}," ThreadPoolTaskScheduler"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"();")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#E5C07B"}},"        taskScheduler"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"."),s("span",{style:{color:"#6F42C1","--shiki-dark":"#61AFEF"}},"setThreadNamePrefix"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"("),s("span",{style:{color:"#032F62","--shiki-dark":"#98C379"}},'"ThreadPoolTaskScheduler"'),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},");")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A737D","--shiki-dark":"#7F848E","font-style":"inherit","--shiki-dark-font-style":"italic"}},"        // 核心线程池数量，方法: 返回可用处理器的Java虚拟机的数量")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#E5C07B"}},"        taskScheduler"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"."),s("span",{style:{color:"#6F42C1","--shiki-dark":"#61AFEF"}},"setPoolSize"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"("),s("span",{style:{color:"#24292E","--shiki-dark":"#E5C07B"}},"Runtime"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"."),s("span",{style:{color:"#6F42C1","--shiki-dark":"#61AFEF"}},"getRuntime"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"()."),s("span",{style:{color:"#6F42C1","--shiki-dark":"#61AFEF"}},"availableProcessors"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"() "),s("span",{style:{color:"#D73A49","--shiki-dark":"#56B6C2"}},"*"),s("span",{style:{color:"#005CC5","--shiki-dark":"#D19A66"}}," 2"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},");")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A737D","--shiki-dark":"#7F848E","font-style":"inherit","--shiki-dark-font-style":"italic"}},"        // taskScheduler.initialize();")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#E5C07B"}},"        taskRegistrar"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"."),s("span",{style:{color:"#6F42C1","--shiki-dark":"#61AFEF"}},"setTaskScheduler"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"(taskScheduler);")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"    }")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"}")]),a(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),g=s("div",{class:"language-yaml line-numbers-mode","data-ext":"yml","data-title":"yml"},[s("pre",{class:"shiki shiki-themes github-light one-dark-pro",style:{"background-color":"#fff","--shiki-dark-bg":"#282c34",color:"#24292e","--shiki-dark":"#abb2bf"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#22863A","--shiki-dark":"#E06C75"}},"server"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},":")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#22863A","--shiki-dark":"#E06C75"}},"  port"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},": "),s("span",{style:{color:"#005CC5","--shiki-dark":"#D19A66"}},"8081")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#22863A","--shiki-dark":"#E06C75"}},"spring"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},":")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#22863A","--shiki-dark":"#E06C75"}},"  application"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},":")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#22863A","--shiki-dark":"#E06C75"}},"    name"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},": "),s("span",{style:{color:"#032F62","--shiki-dark":"#98C379"}},"daily-task")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#22863A","--shiki-dark":"#E06C75"}},"  task"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},":")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#22863A","--shiki-dark":"#E06C75"}},"    scheduling"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},":")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#22863A","--shiki-dark":"#E06C75"}},"      pool"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},":")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#22863A","--shiki-dark":"#E06C75"}},"        size"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},": "),s("span",{style:{color:"#005CC5","--shiki-dark":"#D19A66"}},"8"),s("span",{style:{color:"#6A737D","--shiki-dark":"#7F848E","font-style":"inherit","--shiki-dark-font-style":"italic"}}," #配置Scheduled定时任务为多线程")]),a(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),f=s("p",null,[a("添加 "),s("code",null,"@EnableAsync"),a(" 注解，在相应方法上添加 "),s("code",null,"@Async"),a(" 注解")],-1),S=s("div",{class:"language-java line-numbers-mode","data-ext":"java","data-title":"java"},[s("pre",{class:"shiki shiki-themes github-light one-dark-pro",style:{"background-color":"#fff","--shiki-dark-bg":"#282c34",color:"#24292e","--shiki-dark":"#abb2bf"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"@"),s("span",{style:{color:"#D73A49","--shiki-dark":"#E5C07B"}},"SpringBootApplication")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"@"),s("span",{style:{color:"#D73A49","--shiki-dark":"#E5C07B"}},"EnableScheduling")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"@"),s("span",{style:{color:"#D73A49","--shiki-dark":"#E5C07B"}},"EnableAsync")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}},"public"),s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}}," class"),s("span",{style:{color:"#6F42C1","--shiki-dark":"#E5C07B"}}," TaskApplication"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}},"    public"),s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}}," static"),s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}}," void"),s("span",{style:{color:"#6F42C1","--shiki-dark":"#61AFEF"}}," main"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"("),s("span",{style:{color:"#D73A49","--shiki-dark":"#E5C07B"}},"String"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"[] "),s("span",{style:{color:"#E36209","--shiki-dark":"#E06C75","font-style":"inherit","--shiki-dark-font-style":"italic"}},"args"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},")"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#E5C07B"}},"        SpringApplication"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"."),s("span",{style:{color:"#6F42C1","--shiki-dark":"#61AFEF"}},"run"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"("),s("span",{style:{color:"#24292E","--shiki-dark":"#E5C07B"}},"TaskApplication"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"."),s("span",{style:{color:"#24292E","--shiki-dark":"#E5C07B"}},"class"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},", args);")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"    }")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"}")]),a(`
`),s("span",{class:"line"}),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"@"),s("span",{style:{color:"#D73A49","--shiki-dark":"#E5C07B"}},"Component")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}},"public"),s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}}," class"),s("span",{style:{color:"#6F42C1","--shiki-dark":"#E5C07B"}}," TestAJob"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}},"    private"),s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}}," static"),s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}}," final"),s("span",{style:{color:"#24292E","--shiki-dark":"#E5C07B"}}," Logger"),s("span",{style:{color:"#24292E","--shiki-dark":"#E06C75"}}," logger "),s("span",{style:{color:"#D73A49","--shiki-dark":"#56B6C2"}},"="),s("span",{style:{color:"#24292E","--shiki-dark":"#E5C07B"}}," LoggerFactory"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"."),s("span",{style:{color:"#6F42C1","--shiki-dark":"#61AFEF"}},"getLogger"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"("),s("span",{style:{color:"#24292E","--shiki-dark":"#E5C07B"}},"TestAJob"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"."),s("span",{style:{color:"#24292E","--shiki-dark":"#E5C07B"}},"class"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},");")]),a(`
`),s("span",{class:"line"}),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"    @"),s("span",{style:{color:"#D73A49","--shiki-dark":"#E5C07B"}},"Async")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"    @"),s("span",{style:{color:"#D73A49","--shiki-dark":"#E5C07B"}},"Scheduled"),s("span",{style:{color:"#24292E","--shiki-dark":"#E06C75"}},"("),s("span",{style:{color:"#005CC5","--shiki-dark":"#D19A66"}},"cron"),s("span",{style:{color:"#D73A49","--shiki-dark":"#56B6C2"}}," ="),s("span",{style:{color:"#032F62","--shiki-dark":"#98C379"}},' "*/2 * * * * ?"'),s("span",{style:{color:"#24292E","--shiki-dark":"#E06C75"}},")")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}},"    public"),s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}}," void"),s("span",{style:{color:"#6F42C1","--shiki-dark":"#61AFEF"}}," testA"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"()"),s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}}," throws"),s("span",{style:{color:"#24292E","--shiki-dark":"#E5C07B"}}," InterruptedException"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#E5C07B"}},"        Thread"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"."),s("span",{style:{color:"#6F42C1","--shiki-dark":"#61AFEF"}},"sleep"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"("),s("span",{style:{color:"#005CC5","--shiki-dark":"#D19A66"}},"10000"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},");")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#E5C07B"}},"        logger"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"."),s("span",{style:{color:"#6F42C1","--shiki-dark":"#61AFEF"}},"info"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"("),s("span",{style:{color:"#032F62","--shiki-dark":"#98C379"}},'"testA 执行=============="'),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},");")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"    }")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"}")]),a(`
`),s("span",{class:"line"}),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"@"),s("span",{style:{color:"#D73A49","--shiki-dark":"#E5C07B"}},"Component")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}},"public"),s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}}," class"),s("span",{style:{color:"#6F42C1","--shiki-dark":"#E5C07B"}}," TestBJob"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}},"    private"),s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}}," static"),s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}}," final"),s("span",{style:{color:"#24292E","--shiki-dark":"#E5C07B"}}," Logger"),s("span",{style:{color:"#24292E","--shiki-dark":"#E06C75"}}," logger "),s("span",{style:{color:"#D73A49","--shiki-dark":"#56B6C2"}},"="),s("span",{style:{color:"#24292E","--shiki-dark":"#E5C07B"}}," LoggerFactory"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"."),s("span",{style:{color:"#6F42C1","--shiki-dark":"#61AFEF"}},"getLogger"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"("),s("span",{style:{color:"#24292E","--shiki-dark":"#E5C07B"}},"TestBJob"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"."),s("span",{style:{color:"#24292E","--shiki-dark":"#E5C07B"}},"class"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},");")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#E06C75"}},"    ")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"    @"),s("span",{style:{color:"#D73A49","--shiki-dark":"#E5C07B"}},"Async")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"    @"),s("span",{style:{color:"#D73A49","--shiki-dark":"#E5C07B"}},"Scheduled"),s("span",{style:{color:"#24292E","--shiki-dark":"#E06C75"}},"("),s("span",{style:{color:"#005CC5","--shiki-dark":"#D19A66"}},"cron"),s("span",{style:{color:"#D73A49","--shiki-dark":"#56B6C2"}}," ="),s("span",{style:{color:"#032F62","--shiki-dark":"#98C379"}},' "*/2 * * * * ?"'),s("span",{style:{color:"#24292E","--shiki-dark":"#E06C75"}},")")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}},"    public"),s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}}," void"),s("span",{style:{color:"#6F42C1","--shiki-dark":"#61AFEF"}}," testB"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"()"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#E5C07B"}},"        logger"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"."),s("span",{style:{color:"#6F42C1","--shiki-dark":"#61AFEF"}},"info"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"("),s("span",{style:{color:"#032F62","--shiki-dark":"#98C379"}},'"testB 执行=============="'),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},");")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"    }")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"}")]),a(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),x=o(`<h2 id="异常处理" tabindex="-1"><a class="header-anchor" href="#异常处理"><span>异常处理</span></a></h2><p>spring 通过注解的方式可以通过 scheduler 的 setErrorHandler 处理：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="color:#D73A49;--shiki-dark:#E5C07B;">EnableScheduling</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="color:#D73A49;--shiki-dark:#E5C07B;">Configuration</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">class</span><span style="color:#6F42C1;--shiki-dark:#E5C07B;"> SchedulingConfiguration</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> implements</span><span style="color:#6F42C1;--shiki-dark:#E5C07B;"> SchedulingConfigurer</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    private</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> final</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> Logger</span><span style="color:#24292E;--shiki-dark:#E06C75;"> logger </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> LoggerFactory</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">getLogger</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">getClass</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    private</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> final</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> ThreadPoolTaskScheduler</span><span style="color:#24292E;--shiki-dark:#E06C75;"> taskScheduler</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#61AFEF;">    SchedulingConfiguration</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">()</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">        taskScheduler </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> ThreadPoolTaskScheduler</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">        taskScheduler</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">setErrorHandler</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(t </span><span style="color:#D73A49;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> logger</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">error</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#032F62;--shiki-dark:#98C379;">&quot;Exception in @Scheduled task. &quot;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, t));</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">        taskScheduler</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">setThreadNamePrefix</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#032F62;--shiki-dark:#98C379;">&quot;@scheduled-&quot;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">        taskScheduler</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">initialize</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    @</span><span style="color:#D73A49;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> configureTasks</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#24292E;--shiki-dark:#E5C07B;">ScheduledTaskRegistrar</span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;"> taskRegistrar</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">        taskRegistrar</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">setScheduler</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(taskScheduler);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>亦是在代码中直接 <code>try-catch</code>:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="color:#D73A49;--shiki-dark:#E5C07B;">Scheduled</span><span style="color:#24292E;--shiki-dark:#E06C75;">(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">cron</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#032F62;--shiki-dark:#98C379;"> &quot;\${schedulerRate}&quot;</span><span style="color:#24292E;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">public</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> scheduledJob</span><span style="color:#24292E;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    try</span><span style="color:#24292E;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">        businessLogicService</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">doBusinessLogic</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">    } </span><span style="color:#D73A49;--shiki-dark:#C678DD;">catch</span><span style="color:#24292E;--shiki-dark:#E06C75;"> (</span><span style="color:#24292E;--shiki-dark:#E5C07B;">Exception</span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;"> e</span><span style="color:#24292E;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">        log</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">error</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(e);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function T(_,j){const p=e("ExternalLinkIcon"),c=e("Tabs");return k(),t("div",null,[y,h(" more "),s("blockquote",null,[E,s("ul",null,[s("li",null,[a("Spring 中的 "),u,a(" 注解 - "),s("a",A,[a("https://springdoc.cn/spring-scheduled-tasks/"),r(p)])])])]),C,r(c,{id:"133",data:[{id:"配置类初始化自定义"},{id:"配置类接口重写"},{id:"配置文件配置"},{id:"使用异步注解"}]},{title0:i(({value:l,isActive:n})=>[a("配置类初始化自定义")]),title1:i(({value:l,isActive:n})=>[a("配置类接口重写")]),title2:i(({value:l,isActive:n})=>[a("配置文件配置")]),title3:i(({value:l,isActive:n})=>[a("使用异步注解")]),tab0:i(({value:l,isActive:n})=>[F,v,b,D]),tab1:i(({value:l,isActive:n})=>[m]),tab2:i(({value:l,isActive:n})=>[g]),tab3:i(({value:l,isActive:n})=>[f,S]),_:1}),x])}const P=d(B,[["render",T],["__file","springboot_schedule.html.vue"]]),R=JSON.parse('{"path":"/zh/dev-java-schedule/springboot_schedule.html","title":"SpringBoot Schedule 使用","lang":"zh-CN","frontmatter":{"title":"SpringBoot Schedule 使用","date":"2024-06-26T00:00:00.000Z","tag":["java","spring","schedule"],"order":32,"description":"SpringBoot 定时任务调度","head":[["meta",{"property":"og:url","content":"https://lawsssscat.github.io/blog/zh/blog/zh/dev-java-schedule/springboot_schedule.html"}],["meta",{"property":"og:site_name","content":"个人博客"}],["meta",{"property":"og:title","content":"SpringBoot Schedule 使用"}],["meta",{"property":"og:description","content":"SpringBoot 定时任务调度"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-26T00:07:20.000Z"}],["meta",{"property":"article:author","content":"Steven"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"spring"}],["meta",{"property":"article:tag","content":"schedule"}],["meta",{"property":"article:published_time","content":"2024-06-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-26T00:07:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringBoot Schedule 使用\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-26T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-26T00:07:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Steven\\",\\"url\\":\\"https://github.com/LawssssCat/\\"}]}"]]},"headers":[{"level":2,"title":"配置方式","slug":"配置方式","link":"#配置方式","children":[]},{"level":2,"title":"调度策略","slug":"调度策略","link":"#调度策略","children":[{"level":3,"title":"以固定延迟调度任务","slug":"以固定延迟调度任务","link":"#以固定延迟调度任务","children":[]},{"level":3,"title":"以固定频率调度任务","slug":"以固定频率调度任务","link":"#以固定频率调度任务","children":[]},{"level":3,"title":"使用 Cron 表达式调度任务","slug":"使用-cron-表达式调度任务","link":"#使用-cron-表达式调度任务","children":[]}]},{"level":2,"title":"参数化","slug":"参数化","link":"#参数化","children":[]},{"level":2,"title":"配置原理","slug":"配置原理","link":"#配置原理","children":[]},{"level":2,"title":"配置线程池","slug":"配置线程池","link":"#配置线程池","children":[]},{"level":2,"title":"异常处理","slug":"异常处理","link":"#异常处理","children":[]}],"git":{"createdTime":1719360440000,"updatedTime":1719360440000,"contributors":[{"name":"lawsssscat","email":"18041500+LawssssCat@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":3.79,"words":1137},"filePathRelative":"zh/dev-java-schedule/springboot_schedule.md","localizedDate":"2024年6月26日","excerpt":"<p>SpringBoot 定时任务调度</p>\\n","autoDesc":true}');export{P as comp,R as data};
