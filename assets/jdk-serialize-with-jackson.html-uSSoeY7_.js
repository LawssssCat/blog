import{_ as s,o as a,c as n,f as i}from"./app-CkKBrMyO.js";const e={},l=i(`<p>Java 对象和 JSON 数据之间进行转换。</p><p>核心概念、基本用法、高级配置及处理集合类型的数据。</p><p>参考：</p><ul><li>原理、使用与高级配置 - https://blog.csdn.net/qq_38411796/article/details/139962039</li></ul><div class="language-xml line-numbers-mode" data-ext="xml" data-title="pom.xml"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="color:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">&gt;com.fasterxml.jackson.core&lt;/</span><span style="color:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="color:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">&gt;jackson-databind&lt;/</span><span style="color:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="color:#22863A;--shiki-dark:#E06C75;">version</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">&gt;2.12.3&lt;/</span><span style="color:#22863A;--shiki-dark:#E06C75;">version</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="color:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">ObjectMapper</span><span style="color:#24292E;--shiki-dark:#E06C75;"> objectMapper </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> ObjectMapper</span><span style="color:#24292E;--shiki-dark:#E06C75;">()</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">// 创建一个对象</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">User</span><span style="color:#24292E;--shiki-dark:#E06C75;"> user </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> User</span><span style="color:#24292E;--shiki-dark:#E06C75;">()</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">user</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">setName</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#032F62;--shiki-dark:#98C379;">&quot;John&quot;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">user</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">setAge</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">30</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">// 序列化：Java 对象 -&gt; JSON 字符串</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">String</span><span style="color:#24292E;--shiki-dark:#E06C75;"> jsonString </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> objectMapper</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">writeValueAsString</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(user);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">System</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E5C07B;">out</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#032F62;--shiki-dark:#98C379;">&quot;JSON String: &quot;</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> jsonString);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">// 反序列化：JSON 字符串 -&gt; Java 对象</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">User</span><span style="color:#24292E;--shiki-dark:#E06C75;"> deserializedUser </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> objectMapper</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">readValue</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(jsonString, </span><span style="color:#24292E;--shiki-dark:#E5C07B;">User</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E5C07B;">class</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">System</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E5C07B;">out</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#032F62;--shiki-dark:#98C379;">&quot;Deserialized User: &quot;</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> deserializedUser);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h2><h3 id="objectmapper" tabindex="-1"><a class="header-anchor" href="#objectmapper"><span>ObjectMapper</span></a></h3><p>ObjectMapper 核心类。 负责将 Java 对象转换为 JSON 以及将 JSON 转换为 Java 对象。 提供许多方法，例如 writeValue、readValue 等。</p><h3 id="jsonparser-和-jsongenerator" tabindex="-1"><a class="header-anchor" href="#jsonparser-和-jsongenerator"><span>JsonParser 和 JsonGenerator</span></a></h3><ul><li>JsonParser：低级别的 JSON 解析器，用于逐步解析 JSON 内容。</li><li>JsonGenerator：低级别的 JSON 生成器，用于逐步生成 JSON 内容。</li></ul><h3 id="annotations" tabindex="-1"><a class="header-anchor" href="#annotations"><span>Annotations</span></a></h3><p>Jackson 提供了许多注解来定制序列化和反序列化过程，包括但不限于：</p><ul><li><code>@JsonProperty</code>: 指定字段的 JSON 名称。</li><li><code>@JsonIgnore</code>: 忽略字段。</li><li><code>@JsonFormat</code>: 格式化日期和时间。</li><li><code>@JsonInclude</code>: 指定包含的条件。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="color:#D73A49;--shiki-dark:#E5C07B;">Data</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">class</span><span style="color:#6F42C1;--shiki-dark:#E5C07B;"> User</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    @</span><span style="color:#D73A49;--shiki-dark:#E5C07B;">JsonProperty</span><span style="color:#24292E;--shiki-dark:#E06C75;">(</span><span style="color:#032F62;--shiki-dark:#98C379;">&quot;full_name&quot;</span><span style="color:#24292E;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    private</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> String</span><span style="color:#24292E;--shiki-dark:#E06C75;"> name</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    @</span><span style="color:#D73A49;--shiki-dark:#E5C07B;">JsonIgnore</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    private</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="color:#24292E;--shiki-dark:#E06C75;"> age</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    @</span><span style="color:#D73A49;--shiki-dark:#E5C07B;">JsonFormat</span><span style="color:#24292E;--shiki-dark:#E06C75;">(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">shape</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> JsonFormat</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E5C07B;">Shape</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E5C07B;">STRING</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> pattern</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#032F62;--shiki-dark:#98C379;"> &quot;dd-MM-yyyy&quot;</span><span style="color:#24292E;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    private</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> Date</span><span style="color:#24292E;--shiki-dark:#E06C75;"> birthDate</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),r=[l];function o(p,t){return a(),n("div",null,r)}const d=s(e,[["render",o],["__file","jdk-serialize-with-jackson.html.vue"]]),k=JSON.parse('{"path":"/zh/dev-java-commonsense/jdk-serialize-with-jackson.html","title":"JDK 序列化/反序列化功能（jackson）","lang":"zh-CN","frontmatter":{"title":"JDK 序列化/反序列化功能（jackson）","date":"2024-08-07T00:00:00.000Z","tag":["java","json"],"order":66,"description":"Java 对象和 JSON 数据之间进行转换。 核心概念、基本用法、高级配置及处理集合类型的数据。 参考： 原理、使用与高级配置 - https://blog.csdn.net/qq_38411796/article/details/139962039 概念 ObjectMapper ObjectMapper 核心类。 负责将 Java 对象转换为 J...","head":[["meta",{"property":"og:url","content":"https://lawsssscat.github.io/blog/zh/blog/zh/dev-java-commonsense/jdk-serialize-with-jackson.html"}],["meta",{"property":"og:site_name","content":"个人博客"}],["meta",{"property":"og:title","content":"JDK 序列化/反序列化功能（jackson）"}],["meta",{"property":"og:description","content":"Java 对象和 JSON 数据之间进行转换。 核心概念、基本用法、高级配置及处理集合类型的数据。 参考： 原理、使用与高级配置 - https://blog.csdn.net/qq_38411796/article/details/139962039 概念 ObjectMapper ObjectMapper 核心类。 负责将 Java 对象转换为 J..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-07T22:56:07.000Z"}],["meta",{"property":"article:author","content":"Steven"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"json"}],["meta",{"property":"article:published_time","content":"2024-08-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-07T22:56:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JDK 序列化/反序列化功能（jackson）\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-07T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-07T22:56:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Steven\\",\\"url\\":\\"https://github.com/LawssssCat/\\"}]}"]]},"headers":[{"level":2,"title":"概念","slug":"概念","link":"#概念","children":[{"level":3,"title":"ObjectMapper","slug":"objectmapper","link":"#objectmapper","children":[]},{"level":3,"title":"JsonParser 和 JsonGenerator","slug":"jsonparser-和-jsongenerator","link":"#jsonparser-和-jsongenerator","children":[]},{"level":3,"title":"Annotations","slug":"annotations","link":"#annotations","children":[]}]}],"git":{"createdTime":1723071367000,"updatedTime":1723071367000,"contributors":[{"name":"lawsssscat","email":"18041500+LawssssCat@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":1.01,"words":304},"filePathRelative":"zh/dev-java-commonsense/jdk-serialize-with-jackson.md","localizedDate":"2024年8月7日","excerpt":"<p>Java 对象和 JSON 数据之间进行转换。</p>\\n<p>核心概念、基本用法、高级配置及处理集合类型的数据。</p>\\n<p>参考：</p>\\n<ul>\\n<li>原理、使用与高级配置 - https://blog.csdn.net/qq_38411796/article/details/139962039</li>\\n</ul>\\n<div class=\\"language-xml line-numbers-mode\\" data-ext=\\"xml\\" data-title=\\"pom.xml\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro\\" style=\\"background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span style=\\"color:#24292E;--shiki-dark:#ABB2BF\\">&lt;</span><span style=\\"color:#22863A;--shiki-dark:#E06C75\\">dependency</span><span style=\\"color:#24292E;--shiki-dark:#ABB2BF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color:#24292E;--shiki-dark:#ABB2BF\\">    &lt;</span><span style=\\"color:#22863A;--shiki-dark:#E06C75\\">groupId</span><span style=\\"color:#24292E;--shiki-dark:#ABB2BF\\">&gt;com.fasterxml.jackson.core&lt;/</span><span style=\\"color:#22863A;--shiki-dark:#E06C75\\">groupId</span><span style=\\"color:#24292E;--shiki-dark:#ABB2BF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color:#24292E;--shiki-dark:#ABB2BF\\">    &lt;</span><span style=\\"color:#22863A;--shiki-dark:#E06C75\\">artifactId</span><span style=\\"color:#24292E;--shiki-dark:#ABB2BF\\">&gt;jackson-databind&lt;/</span><span style=\\"color:#22863A;--shiki-dark:#E06C75\\">artifactId</span><span style=\\"color:#24292E;--shiki-dark:#ABB2BF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color:#24292E;--shiki-dark:#ABB2BF\\">    &lt;</span><span style=\\"color:#22863A;--shiki-dark:#E06C75\\">version</span><span style=\\"color:#24292E;--shiki-dark:#ABB2BF\\">&gt;2.12.3&lt;/</span><span style=\\"color:#22863A;--shiki-dark:#E06C75\\">version</span><span style=\\"color:#24292E;--shiki-dark:#ABB2BF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color:#24292E;--shiki-dark:#ABB2BF\\">&lt;/</span><span style=\\"color:#22863A;--shiki-dark:#E06C75\\">dependency</span><span style=\\"color:#24292E;--shiki-dark:#ABB2BF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{d as comp,k as data};
