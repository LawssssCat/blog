import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,a as i,b as r,d as h,e as d,f as s,w as a,r as c,o}from"./app-BqxqBcnc.js";const g={},A={class:"hint-container tip"};function y(u,l){const t=c("Tabs");return o(),p("div",null,[l[14]||(l[14]=i("p",null,"GCC（GNU Compiler Collection，GNU编译程序集合）是GNU项目的一个开放源码产品，用于完成C语言代码的编译。如Python就是由C语言开发，由GNU编译程序编译的！",-1)),l[15]||(l[15]=i("p",null,[s("GCC官网地址： "),i("a",{href:"https://gcc.gnu.org/",target:"_blank",rel:"noopener noreferrer"},"https://gcc.gnu.org/"),s(),i("br"),s(" GCC官方文档： "),i("a",{href:"https://gcc.gnu.org/onlinedocs/",target:"_blank",rel:"noopener noreferrer"},"https://gcc.gnu.org/onlinedocs/")],-1)),r(" more "),l[16]||(l[16]=h(`<p>参考：</p><ul><li>[x] B站|李呵欠|GNU Makefile编译C/C++教程（Linux系统、VSCODE） - <a href="https://www.bilibili.com/video/BV1EM41177s1/" target="_blank" rel="noopener noreferrer">https://www.bilibili.com/video/BV1EM41177s1/</a><br> 配套文档 - <a href="https://github.com/WohimLee/GNC-Tutorial" target="_blank" rel="noopener noreferrer">https://github.com/WohimLee/GNC-Tutorial</a></li></ul><h2 id="基础概念" tabindex="-1"><a class="header-anchor" href="#基础概念"><span>基础概念</span></a></h2><h3 id="常见文件、软件" tabindex="-1"><a class="header-anchor" href="#常见文件、软件"><span>常见文件、软件</span></a></h3><p>项目常见组成部分：</p><table><thead><tr><th>模块</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td><code>configure</code></td><td>GCC源码树根目录中的一个脚本，用于设置配置值和创建GCC编译程序必须的make程序文件。</td><td> </td></tr><tr><td><code>gcc</code></td><td>该驱动程序等同于执行编译程序和链接程序以产生需要的输出。</td><td>只能编译c语言</td></tr><tr><td><code>c++</code></td><td>gcc的一个版本，默认语言为C++，而且在链接的时候自动包含标准C++库，这和g++一样。</td><td> </td></tr><tr><td><code>g++</code></td><td>gcc的一个版本，默认语言为G++，而且在链接的时候自动包含标准C++库，这和c++一样。</td><td>向下兼容，同时能编译C/C++语言 <br> （<span style="background:yellow;">一般选择此作为编译工具</span>）</td></tr><tr><td><code>libgcc</code></td><td>该库包含的例程段被作为编译程序的一部分，是因为它们可以被链接到实际的可执行程序中。它们是例程，链接到可执行程序，来执行基本的任务，例如浮点运算。这些库中的例程通常都是平台相关的。</td><td> </td></tr><tr><td><code>libstdc++</code></td><td>运行时库，包括定义为标准语言一部分的所有的C++类和函数。</td><td> </td></tr></tbody></table><p>编译常见软件：</p><table><thead><tr><th>工具</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td><code>ar</code></td><td>这是一个程序，可通过文档添加、删除和析取文件来维护库文件。通常使用该文件是为了创建和管理链接程序使用的目标库文档。该程序是binutils包的一部分。</td><td>编译静态库是用到 e.g. <code>ar rcs libcomplex.a complex.o</code></td></tr><tr><td><code>as</code></td><td>GNU汇编器。实际上它是一族汇编器，因为它可以被编译或者能够在各种不同平台上工作。该程序是binutils包的一部分。</td><td>简单说：将C/C++源文件转换成汇编语言</td></tr><tr><td><code>autoconf</code></td><td>产生的shell脚本自动配置源代码包取编译某个特定版本的UNIX。</td><td> </td></tr><tr><td><code>gdb</code></td><td>GNU调试器。可用于检查程序运行时的值和行为。</td><td>各种IDE（vscode/visualstudio/...）底层调用该工具</td></tr><tr><td>GNATS（GNU Bug Tracking System）</td><td>一个跟踪GCC和其他GNU程序问题的在线系统。</td><td>经常在别人工程中下载库编译安装时经常看到这东西</td></tr><tr><td><code>gprof</code></td><td>该程序会监督编译程序的执行过程，并报告程序中各个函数的运行时间，可以根据所提供的配置车文件来优化程序。该程序是binutils包的一部分。</td><td>静态库/动态库都用到 <br> 新手经常碰到的问题大概率与此库相关，如 ld error ...</td></tr><tr><td><code>ld</code></td><td>GNU连接程序。该程序将目标文件的集合组成可执行程序。该程序是binutils包的一部分。</td><td> </td></tr><tr><td><code>libtool</code></td><td>一个基本库，支持make程序的描述文件使用的简化共享库用法的脚本。</td><td> </td></tr><tr><td><code>make</code></td><td>一个工具程序，它会读makefile脚本来确定程序中哪部分需要编译和连接，然后发布必要的命令。它读出的脚本（makefile或Makefile）定义了文件关系和依赖关系。</td><td>make工具的支持库</td></tr></tbody></table><h3 id="编译过程" tabindex="-1"><a class="header-anchor" href="#编译过程"><span>编译过程</span></a></h3><p>简单来说：首先把源代码编译成目标文件， 然后把目标文件链接起来。</p><h4>制作可执行文件</h4><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">↓</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">↓</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hello.c</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> （源文件，文本）</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">↓</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">预处理器（cpp）</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ——</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 注释、宏定义</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ——</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> e.g.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gcc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -E</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hello.c</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -o</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hello.i</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">↓</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">↓</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hello.i</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> （修改了的源程序，文本）</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">↓</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">编译器（ccl）</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ——</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> e.g.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gcc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -S</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hello.c</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -o</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hello.s</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">↓</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">↓</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hello.s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> （汇编程序，文本）</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">↓</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">汇编器（as）</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ——</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> e.g.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gcc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -c</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hello.c</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -o</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hello.o</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">↓</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">↓</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hello.o</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> （目标程序，二进制）（可重定位程序，relocatable</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> object</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> program）</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">↓</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">链接器（ld）</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ——</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> e.g.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gcc</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hello.c</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -o</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hello</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">↓</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">↓</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ←←←</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> prinf.o</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> （链接二进制）</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">↓</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">↓</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hello</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> （目标程序，二进制）（可执行文件）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4>制作库文件</h4>`,13)),d(t,{id:"241",data:[{id:"制作静态库"},{id:"制作动态库"}]},{title0:a(({value:n,isActive:e})=>[...l[0]||(l[0]=[s("制作静态库",-1)])]),title1:a(({value:n,isActive:e})=>[...l[1]||(l[1]=[s("制作动态库",-1)])]),tab0:a(({value:n,isActive:e})=>[...l[2]||(l[2]=[i("p",null,"静态库（static library）是在链接可执行文件时，代码段和数据段直接拷贝到可执行文件中，以便代码复用。",-1),i("p",null,"制作：",-1),i("div",{class:"language-bash line-numbers-mode","data-highlighter":"shiki","data-ext":"bash","data-title":"bash",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"# gcc -c lib1.c lib2.c ...")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"# gcc -c add.c -o add.o")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"# gcc -c tfunc.c -o tfunc.o")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"gcc"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," -c"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," add.c"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," tfunc.c")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"# 库文件命名规范 lib<库名>.a")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"ar"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," -r"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," liboperation.a"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," add.o"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," tfunc.o")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1),i("p",null,"链接：",-1),i("div",{class:"language-bash line-numbers-mode","data-highlighter":"shiki","data-ext":"bash","data-title":"bash",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"# gcc [.c] [.a] -o [.o]")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"# gcc [.c] -o [.o] -l[库名] -L[库路径]")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"gcc"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," calc.c"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," liboperation.a"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," -o"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," calc")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"# 也可以直接使用.o文件链接")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"gcc"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," calc.o"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," tfunc.o"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," add.o"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," -o"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," calc")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1)])]),tab1:a(({value:n,isActive:e})=>[...l[3]||(l[3]=[i("blockquote",null,[i("p",null,[s("动态链接的具体用法参考： "),i("a",{href:"#title-dynamic-link"},"here")])],-1),i("p",null,"动态库（shared library）是在业务运行时才从文件系统中加载到运行环境中的，因此无法在编译和链接阶段获取代码段的符号地址（代码段的符号包括引用的全局数据，调用的函数等）。",-1),i("blockquote",null,[i("p",null,"动态链接执行复杂，执行时间比静态链接长。 但是，极大的节省了 size。 其中用到的 PIC 和动态链接技术是计算机发展史上非常重要的一个里程碑。")],-1),i("p",null,"制作：",-1),i("div",{class:"language-bash line-numbers-mode","data-highlighter":"shiki","data-ext":"bash","data-title":"bash",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"# gcc -c -fpic [.c/.cpp] [.c/.cpp] ...")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"# -fpic/-fPIC")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"#       PIC（position independent code）")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"#       -fPIC 与生成动态链接可以说没有直接关系，不用fPIC依然可以编译出so文件。")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"#       但是如果不加 -fPIC 则加载 .so 文件的代码段时，代码段引用的数据对象需要重定位。")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"#       重定位会修改代码段的内容，这就造成每个使用这个 .so 文件代码段的进程在内核里都会生成这个 .so 文件代码段的copy。")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"#       由于于这个 .so 文件代码段和数据段内存映射的位置不一样，每个copy都不一样。")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"#       💡一般用fPIC来生成so，而生成a时则不用fPIC")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"#")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"#       不使用fPIC编译so的情况：（满足以下4个条件）")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"#       1. 该库可能需要经常更新")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"#       2. 该库需要非常高的效率（尤其是有很多全局量的使用时）")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"#       3. 该库并不很大")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"#       4. 该库基本不需要被多个应用程序共享")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"gcc"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," -c"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," -fpic"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," tfunc.c"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," add.c")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"# gcc -shared [.o] [.o] ... -o [lib库名.so]")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"# -shared —— 生成共享目标文件。通常用在建立共享库时。")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"#            💡是否添加 -fPIC 的问题：")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"#            从GCC来看，shared应该是包含fPIC选项的，但似乎不是所以系统都支持，所以最好显式加上fPIC选项。")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"gcc"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," -shared"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," tfunc.o"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," add.o"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," -o"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," liboperation.so")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1),i("p",null,"链接：",-1),i("div",{class:"language-bash line-numbers-mode","data-highlighter":"shiki","data-ext":"bash","data-title":"bash",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"# gcc [.c/.cpp] -o [可执行文件名] -l[库名] -L[库路径] -Wl,-rpath=[库路径]")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"# -Wl.option —— 此选项传递option给链接")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},'#               多个option中间用逗号","分割')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"# -rpath              —— 运行时动态库路径")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"# -l[库名] -L[库路径]  —— 编译时动态库路径")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"gcc"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," calc.c"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," -o"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," calc"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," -loperation"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," -L$("),i("span",{style:{"--shiki-light":"#0184BC","--shiki-dark":"#56B6C2"}},"pwd"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},")"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," -Wl,-rpath=$("),i("span",{style:{"--shiki-light":"#0184BC","--shiki-dark":"#56B6C2"}},"pwd"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}},")")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1)])]),_:1}),l[17]||(l[17]=i("h4",null,"文件后缀",-1)),d(t,{id:"282",data:[{id:"C语言"},{id:"C++语言"}]},{title0:a(({value:n,isActive:e})=>[...l[4]||(l[4]=[s("C语言",-1)])]),title1:a(({value:n,isActive:e})=>[...l[5]||(l[5]=[s("C++语言",-1)])]),tab0:a(({value:n,isActive:e})=>[...l[6]||(l[6]=[i("table",null,[i("thead",null,[i("tr",null,[i("th",null,"后缀（Suffix）"),i("th",null,"说明（File Contains）")])]),i("tbody",null,[i("tr",null,[i("td",null,[i("code",null,".c")]),i("td",null,[s("源文件 "),i("br"),s(" C source code that is to be preprocessed.")])]),i("tr",null,[i("td",null,[i("code",null,".h")]),i("td",null,[s("头文件 "),i("br"),s(" C or C++ header file.")])]),i("tr",null,[i("td",null,[i("code",null,".i")]),i("td",null,[s("预处理文件 "),i("br"),s(" C source code that is not to be preprocessed. "),i("br"),s(" This type of file is produced as an intermediate step in compilation.")])]),i("tr",null,[i("td",null,[i("code",null,".s")]),i("td",null,[s("汇编语言文件 "),i("br"),s(" Assembly language code. "),i("br"),s(" this type of file is produced as an intermediate step in compilation.")])]),i("tr",null,[i("td",null,[i("code",null,".o")]),i("td",null,[s("目标文件 "),i("br"),s(" An object file in a format appropriate to be supplied to the linker. "),i("br"),s(" This type of file is produced as an intermediate step in compilation.")])]),i("tr",null,[i("td",null,[i("code",null,".a")]),i("td",null,[s("静态库文件 "),i("br"),s(" Static object library (archive).")])]),i("tr",null,[i("td",null,[i("code",null,".so"),s(),i("br"),i("code",null,".lib"),s("/"),i("code",null,".dll"),s(" (for windows)")]),i("td",null,[s("动态库/共享库/运行时库文件 "),i("br"),s(" Shared object library.")])])])],-1)])]),tab1:a(({value:n,isActive:e})=>[...l[7]||(l[7]=[i("table",null,[i("thead",null,[i("tr",null,[i("th",null,"后缀（Suffix）"),i("th",null,"说明（File Contains）")])]),i("tbody",null,[i("tr",null,[i("td",null,[i("code",null,".C"),s("/"),i("code",null,".c++"),s("/"),i("code",null,".cc"),s("/"),i("code",null,".cp"),s("/"),i("code",null,".cpp"),s("/"),i("code",null,".cxx")]),i("td",null,[s("源文件 "),i("br"),s(" C++ source code that is to be preprocessed.")])]),i("tr",null,[i("td",null,[i("code",null,".h")]),i("td",null,[s("头文件 "),i("br"),s(" C or C++ header file.")])]),i("tr",null,[i("td",null,[i("code",null,"<none>")]),i("td",null,"The standard C++ system header files have no suffix")]),i("tr",null,[i("td",null,[i("code",null,".ii")]),i("td",null,[s("预处理文件 "),i("br"),s(" C++ source code that is not to be preprocessed. "),i("br"),s(" This type of file is produced as an intermediate step in compilation.")])]),i("tr",null,[i("td",null,[i("code",null,".s")]),i("td",null,[s("汇编语言文件 "),i("br"),s(" Assembly language code. "),i("br"),s(" this type of file is produced as an intermediate step in compilation.")])]),i("tr",null,[i("td",null,[i("code",null,".o")]),i("td",null,[s("目标文件 "),i("br"),s(" An object file in a format appropriate to be supplied to the linker. "),i("br"),s(" This type of file is produced as an intermediate step in compilation.")])]),i("tr",null,[i("td",null,[i("code",null,".a")]),i("td",null,[s("静态库文件 "),i("br"),s(" Static object library (archive).")])]),i("tr",null,[i("td",null,[i("code",null,".so"),s(),i("br"),i("code",null,".lib"),s("/"),i("code",null,".dll"),s(" (for windows)")]),i("td",null,[s("动态库/共享库/运行时库文件 "),i("br"),s(" Shared object library.")])])])],-1)])]),_:1}),l[18]||(l[18]=h(`<h4>常用编译选项</h4><table><thead><tr><th>编译选项</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td><code>-m64</code></td><td>指定编译为64位应用</td><td> </td></tr><tr><td><code>-std=</code></td><td>指定编译标准，例如： <code>-std=c++11</code>/<code>-std=c++14</code></td><td> </td></tr><tr><td><code>-g</code></td><td>包含调试信息</td><td> </td></tr><tr><td><code>-w</code></td><td>不显示告警</td><td> </td></tr><tr><td><code>-O</code></td><td>优化等级，通常使用 <code>-O3</code></td><td> </td></tr><tr><td><code>-I</code></td><td>加载头文件路径前</td><td> </td></tr><tr><td><code>-fPIC</code> <br> （Position-Independent Code）</td><td>产生二进制文件没有绝对地址，使用全部相对地址。二进制可以被加载到内存任意位置，且可以正确的执行</td><td>共享库必加</td></tr></tbody></table><table><thead><tr><th>链接选项</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td><code>-l</code></td><td>加在库名前面</td><td> </td></tr><tr><td><code>-L</code></td><td>加在库路径前面</td><td> </td></tr><tr><td><code>-Wl,&lt;选项&gt;</code></td><td>将<code>&lt;选项&gt;</code>传递给链接器</td><td> </td></tr><tr><td><code>-Wl,-rpath=&quot;共享库路径&quot;</code></td><td>指定运行时共享库（.so文件）路径所在的目录</td><td> </td></tr></tbody></table><h4>查看ELK信息</h4><p>Linux的可执行文件一般是elf格式（Executable and Linking Format，可执行可连接格式）的，在这个可执行文件的头部包含了很多重要的信息：如文件格式，加载地址，符号表等。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">####################################</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 命令： file &lt;some-file&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">####################################</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> file</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hello.o</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hello.o:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ELF</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 64-bit</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> LSB</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> relocatable,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> x86-64,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> version</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (SYSV), not stripped</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># ELF ——————————————— 💡Executable and Linking Format，可执行可连接格式</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 64-bit</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># LSB ——————————————— 💡Least Significant Bit，最小标识位/最低位有效。表示时是小端模式的程序</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># relocatable ——————— 💡可重定位，运行时才指定内存位置？</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># x86-64 ———————————— 💡cpu架构</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># version 1 (SYSV) —— 💡System V | 程序初始化方案？</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># stripped/not stripped </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#   + stripped     —— 💡将程序中的符号表的信息剔除掉了，优点： 1. 可执行文件体积减少； 2. 程序更难以被调试/逆向/破解</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#   + not stripped —— 💡保留了上述信息，便于调试</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">####################################</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 命令： readelf -h &lt;elk-file&gt; —— 💡查看二进制文件头文件</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">####################################</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> readelf</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -h</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hello.o</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ELF</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Header:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  Magic:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   7f</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 45</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 4c</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 46</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 02</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 01</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 01</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 00</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 00</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 00</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 00</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 00</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 00</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 00</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 00</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 00</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  Class:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">                             ELF64</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  Data:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">                              2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;s complement, little endian</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  Version:                           1 (current)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  OS/ABI:                            UNIX - System V</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  ABI Version:                       0</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  Type:                              REL (Relocatable file) # ———————— 💡文件类型 ❗可重定位，运行时才指定内存位置？</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  Machine:                           Advanced Micro Devices X86-64 # — 💡适配的cpu架构</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  Version:                           0x1</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  Entry point address:               0x0 # ——————————————————————————— 💡程序入口地址 ❗无指定</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  Start of program headers:          0 (bytes into file)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  Start of section headers:          616 (bytes into file)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  Flags:                             0x0</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  Size of this header:               64 (bytes)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  Size of program headers:           0 (bytes)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  Number of program headers:         0</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  Size of section headers:           64 (bytes)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  Number of section headers:         14</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  Section header string table index: 13</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">$ ./hello.o # 未可执行</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">-bash: ./hello.o: cannot execute binary file: Exec format error</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="头文件" tabindex="-1"><a class="header-anchor" href="#头文件"><span>头文件</span></a></h3><p>C/C++ 中 <code>#include</code> 头文件有两种形式，一种是使用尖括号<code>&lt;&gt;</code>，一种是使用双引号<code>&quot;&quot;</code>。</p><ul><li><code>#include</code>/<code>#define</code>/<code>#if</code> 为预处理语句 —— 宏，由预处理器处理 <ul><li><code>#include</code> 用于在编译前将指定的头文件内容插入到源文件中</li></ul></li><li><code>#include &quot;xxx.h&quot;</code> 适合用于指定<strong>项目内部或者开发者本地自定义的头文件</strong>路径 查找顺序： <ol><li>当前文件所在的目录 —— 编译器首先查找与当前源文件同目录的头文件。</li><li>引用该文件的的文件夹 —— 如果该源文件被其他文件通过<code>#include</code>引用，编译器会在最先引用该文件的文件夹内查找。</li><li>指定的项目包路径 —— 略</li><li>全局或系统路径 —— 略</li></ol></li><li><code>#include &lt;xxx.h&gt;</code> 仅在全局或系统或者指定的项目包路径中查找这些头文件，<strong>忽略当前目录，且优先级顺序不同</strong>。 这是为了更高效地查找<strong>标准库和第三方库</strong>中的头文件。（当然也便于读代码时候区分是软件自身的代码还是三方依赖的代码） 查找顺序： <ol><li>C++标准库路径 —— 即如<code>/usr/lib64/libstdc++.so.6</code>等路径。 这些路径可能包含<code>&lt;iostream&gt;</code>/<code>&lt;vector&gt;</code>/<code>&lt;string&gt;</code>等标准库文件。</li><li>系统库路径 —— 这些路径通常是操作系统或者IDE预先配置好的系统路径。 在Linux系统中常见为<code>/usr/include</code>,<code>/usr/local/include</code>等路径（环境变量：<code>LD_LIBRARY_PATH</code>）； 在Windows系统中可能是<code>C:\\Program Files (x86)\\Microsoft Visual Studio\\</code>路径。</li><li>指定的项目包路径 —— 通过编译器参数指定的路径，如<code>-I /path/to/include</code>选项（环境变量：<code>CPLUS_INCLUDE_PATH</code>）。 这个路径可以是多个目录，依赖于构建系统的设置。 这些路径一般存有开发者指定的第三方库的头文件，例如Boost、Poco、QT等。 <ul><li>GCC/Clang: <code>g++ -I /path/to/headers main.cpp</code></li><li>CMake: <code>include_directories()</code>/<code>target_include_directories()</code></li></ul></li></ol></li></ul>`,9)),i("div",A,[l[12]||(l[12]=i("p",{class:"hint-container-title"},"提示",-1)),l[13]||(l[13]=i("p",null,[s("可以通过命令 "),i("code",null,"echo | gcc -x c -v -E -"),s(" 查看具体的搜索路径")],-1)),d(t,{id:"686",data:[{id:"C++编译器（GCC）"},{id:"C++编译器（Clang）"}]},{title0:a(({value:n,isActive:e})=>[...l[8]||(l[8]=[s("C++编译器（GCC）",-1)])]),title1:a(({value:n,isActive:e})=>[...l[9]||(l[9]=[s("C++编译器（Clang）",-1)])]),tab0:a(({value:n,isActive:e})=>[...l[10]||(l[10]=[i("div",{class:"language-bash line-numbers-mode","data-highlighter":"shiki","data-ext":"bash","data-title":"bash",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"# gcc：表示使用GCC编译器进行编译。")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"# -x c++：表示指定编译的语言为C++。")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"# -v：表示显示详细的编译过程信息。")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"# -E：表示仅执行预处理阶段，不进行编译和链接。")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"# -：表示从标准输入读取源代码。")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"$"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," echo"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," | "),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"gcc"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," -x"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," c++"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," -v"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," -E"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," -")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#0184BC","--shiki-dark":"#56B6C2"}},"...")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"ignoring"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," nonexistent"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," directory"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},' "/usr/lib/gcc/x86_64-redhat-linux/15/include-fixed"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"ignoring"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," nonexistent"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," directory"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},' "/usr/lib/gcc/x86_64-redhat-linux/15/../../../../x86_64-redhat-linux/include"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},'#include "..." search starts here:')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"#include <...> search starts here:")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}}," /usr/lib/gcc/x86_64-redhat-linux/15/../../../../include/c++/15")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}}," /usr/lib/gcc/x86_64-redhat-linux/15/../../../../include/c++/15/x86_64-redhat-linux")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}}," /usr/lib/gcc/x86_64-redhat-linux/15/../../../../include/c++/15/backward")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}}," /usr/lib/gcc/x86_64-redhat-linux/15/include")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}}," /usr/local/include")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}}," /usr/include")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#0184BC","--shiki-dark":"#56B6C2"}},"...")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1)])]),tab1:a(({value:n,isActive:e})=>[...l[11]||(l[11]=[i("div",{class:"language-bash line-numbers-mode","data-highlighter":"shiki","data-ext":"bash","data-title":"bash",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"# clang：表示使用GCC编译器进行编译。")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"# -x c++：表示指定编译的语言为C++。")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"# -v：表示显示详细的编译过程信息。")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"# -E：表示仅执行预处理阶段，不进行编译和链接。")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-light-font-style":"italic","--shiki-dark":"#7F848E","--shiki-dark-font-style":"italic"}},"# -：表示从标准输入读取源代码。")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"$"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," echo"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}}," | "),i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"clang"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," -x"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," c++"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," -v"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," -E"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," -")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1)])]),_:1})]),l[19]||(l[19]=h(`<blockquote><p>总结：</p><ul><li><code>#include &lt;...&gt;</code> 优先查找标准库和外部库文件，用于引用系统文件和第三方库等开发者一般不可修改的头文件。</li><li><code>#include &quot;...&quot;</code> 优先查找开发者本地文件，用于引用开发团队项目内部或者开发者本地定义的，开发者可以修改的头文件。</li></ul></blockquote><h3 id="configure" tabindex="-1"><a class="header-anchor" href="#configure"><span>configure</span></a></h3><p><code>configure</code> 是一个脚本文件，定义了执行时可以传入的必要参数，告知配置项目。 <code>configure</code> 程序它会根据传入的配置项目检查程序编译时所依赖的环境以及对程序编译安装进行配置，最终生成编译所需的 <code>Makefile</code> 文件供程序 <code>make</code> 读入使用进而调用相关编译程式来编译最终的二进制程序。</p><p>参考：</p><ul><li>简述configure、pkg-config、pkg_config_path三者的关系 | <a href="https://www.cnblogs.com/wliangde/p/3807532.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/wliangde/p/3807532.html</a></li></ul><h3 id="pkg-config-链接库配置生成器" tabindex="-1"><a class="header-anchor" href="#pkg-config-链接库配置生成器"><span>pkg-config 链接库配置生成器</span></a></h3><p>而configure脚本在检查相应依赖环境时(例：所依赖软件的版本、相应库版本等)，通常会通过pkg-config的工具来检测相应依赖环境。</p><p>一般来说，如果库的头文件不在 <code>/usr/include</code> 目录中，那么在编译的时候需要用 <code>-I</code> 参数指定其路径。 但由于编译的环境和编译后程序运行的环境大概率不同，通过 <code>-I</code> 指定的文件路径大概率也不一样，这是需要编译后的 <code>lib/pkgconfig</code> 目录中添加 <code>.pc</code> 文件来指定库的各种必要信息，包括版本信息、编译和连接需要的参数等。 这样，不管库文件安装在哪，通过库对应的 <code>.pc</code> 文件就可以准确定位，可以使用相同的编译和连接命令，使得编译和连接界面统一。</p><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" data-title="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>prefix=/opt/gtk/</span></span>
<span class="line"><span>exec_prefix=\${prefix}</span></span>
<span class="line"><span>libdir=\${exec_prefix}/lib</span></span>
<span class="line"><span>includedir=\${prefix}/include</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>glib_genmarshal=glib-genmarshal</span></span>
<span class="line"><span>gobject_query=gobject-query</span></span>
<span class="line"><span>glib_mkenums=glib-mkenums</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>Name: GLib</span></span>
<span class="line"><span>Description: C Utility Library</span></span>
<span class="line"><span>Version: 2.12.13</span></span>
<span class="line"><span>Libs: -L\${libdir} -lglib-2.0</span></span>
<span class="line"><span>Cflags: -I\${includedir}/glib-2.0 -I\${libdir}/glib-2.0/include</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 列出所有可使用的包</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 位置在：</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># + /usr/lib/pkgconfig —— 此目录下都是各种.pc文件。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># + /usr/local/lib/pkgconfig —— 新软件一般都会安装.pc文件</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># + 没有可以自己创建，并且设置环境变量 PKG_CONFIG_PATH 寻找 .pc 文件路径。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pkg-config</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> –-list-all</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 给出在编译时所需要的选项</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gcc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -c</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> \`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pkg-config</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --cflags</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> glib-2.0\`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> sample.c</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 给出连接时的选项</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gcc</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sample.o</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -o</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sample</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> \`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pkg-config</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --libs</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> glib-2.0\`</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> PKG_CONFIG_PATH</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">opt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">gtk</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">lib</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">pkgconfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$PKG_CONFIG_PATH</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> LD_LIBRARY_PATH</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">opt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">gtk</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">lib</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$LD_LIBRARY_PATH</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="title-dynamic-link" tabindex="-1"><a class="header-anchor" href="#title-dynamic-link"><span>动态链接</span></a></h3><p>Linux支持动态连接库，不仅节省了磁盘、内存空间，而且可以提高程序运行效率。不过引入动态连接库也可能会带来很多问题，例如动态连接库的调试、升级更新和潜在的安全威胁。</p><blockquote><p>参考：</p><ul><li>动态符号链接的细节 - <a href="https://www.w3cschool.cn/cbook/ojay2ozt.html" target="_blank" rel="noopener noreferrer">https://www.w3cschool.cn/cbook/ojay2ozt.html</a> 【非常详细】</li></ul></blockquote><p>为了让动态链接器能够进行符号的重定位，必须把动态链接库的相关信息写入到可执行文件当中：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 通过 readelf -d 可以打印出该文件直接依赖的库</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> readelf</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">grep</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> NEEDED</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> 0x00000001</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (NEEDED)                     Shared library: [libc.so.6]</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 通过 ldd 命令则可以打印出所有依赖或者间接依赖的库</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ldd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> test</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      linux-gate.so.1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =&gt;  (0xffffe000) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 在文件系统中并没有对应的库文件，它是一个虚拟的动态链接库，对应进程内存映像的内核部分。参考： http://www.linux010.cn/program/Linux-gateso1-DeHanYi-pcee6103.htm</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      libc.so.6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/lib/libc.so.6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (0xb7da2000)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      /lib/ld-linux.so.2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (0xb7efc000) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 动态链接器 | 绝对路径 | readelf -x .interp test | interpeter</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      # 程序的加载过程 - 动态链接器</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      # 当 Shell 解释器或者其他父进程通过exec启动我们的程序时，系统会先为ld-linux创建内存映像，然后把控制权交给ld-linux，</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      # 之后ld-linux负责为可执行程序提供运行环境，负责解释程序的运行，因此ld-linux也叫做dynamic loader（或intepreter）</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      # 参考： http://www.ibm.com/developerworks/cn/linux/l-elf/part1/index.html</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>程序有两种方式使用库</p><ul><li>编译时通过 <code>-l</code>,<code>-L</code> 参数隐式使用： <code>gcc -o test test.c -lmyprintf -L./ -I./</code></li><li>运行时通过 <code>LD_LIBRARY_PATH</code> 环境变量显示使用： <code>LD_LIBRARY_PATH=$PWD</code></li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p><strong>指定动态库位置</strong>：</p><p>通过 <code>LD_LIBRARY_PATH</code> 参数，它类似 Shell 解释器中用于查找可执行文件的 <code>PATH</code> 环境变量，也是通过冒号分开指定了各个存放库函数的路径。</p><p>该变量实际上也可以通过 <code>/etc/ld.so.conf</code> 文件来指定，一行对应一个路径名。 （一般需要管理员权限） <br> 为了提高查找和加载动态链接库的效率，系统启动后会通过 <code>ldconfig</code> 工具创建一个库的缓存 <code>/etc/ld.so.cache</code>。 如果用户通过 <code>/etc/ld.so.conf</code> 加入了新的库搜索路径或者是把新库加到某个原有的库目录下，最好是执行一下 <code>ldconfig</code> 以便刷新缓存。</p><p>更多参考： <code>man ld-linux</code>, <code>/lib/ld-linux.so.2</code></p></div><h4>动态链接器（dynamic linker/loader）</h4><p>Linux 下 elf 文件的动态链接器是 ld-linux.so，即 <code>/lib/ld-linux.so.2</code>。 通过 <code>man ld-linux</code> 可以获取与动态链接器相关的资料，包括各种相关的环境变量和文件都有详细的说明。</p><p>如：</p><ul><li><p><code>LD_LIBRARY_PATH</code></p></li><li><p><code>LD_BIND_NOW</code></p></li><li><p><code>LD_PRELOAD</code> 指定预装载一些库，以便替换其他库中的函数，从而做一些安全方面的处理</p></li><li><p><code>LD_DEBUG</code> 用来进行动态链接的相关调试</p></li><li><p><code>ld.so.conf</code></p></li><li><p><code>ld.so.cache</code></p></li><li><p><code>/etc/ld.so.preload</code> 指定需要预装载的库</p></li></ul><h4>运行时库的连接 <code>LD_LIBRARY_PATH</code></h4><p>库文件在连接（静态库和共享库）和运行（仅限于使用共享库的程序）时被使用，其搜索路径是在系统中进行设置的。</p><p>一般Linux系统把 <code>/lib</code> 和 <code>/usr/lib</code> 两个目录作为默认的库搜索路径，所以使用这两个目录中的库是不需要进行设置搜索路径即可直接使用。 对于处于默认库搜索路径之外的库，需要将库的位置添加到 库的搜索路径之中。 设置库文件的搜索路径有下列两种方式，可任选其一使用：</p><ol><li>会话生效 —— 在环境变量 <code>LD_LIBRARY_PATH</code> 中指明库的搜索路径。</li></ol><p><code>export LD_LIBRARY_PATH=/opt/gtk/lib:$LD_LIBRARY_PATH</code></p><ol><li>永久生效 —— 在 <code>/etc/ld.so.conf</code> 文件中添加库的搜索路径（绝对路径）。 ⚠️一般需管理员权限</li></ol><p>e.g.</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">/usr/X11R6/lib</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">/usr/local/lib</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">/opt/lib</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>另外，为了加快程序执行时对共享库的定位速度，避免使用搜索路径查找共享库的低效率，会有 <code>/etc/ld.so.cache</code> 库列表文件可以直接读取、搜索。 <code>/etc/ld.so.cache</code> 是一个非文本的数据文件，不能直接编辑，它是根据 <code>/etc/ld.so.conf</code> 中设置的搜索路径由 <code>/sbin/ldconfig</code> 命令将这些搜索路径下的共享库文件集中在一起而生成的( <code>ldconfig</code> 命令要以 root 权限执行)。</p><p>如当安装完一些库文件(例如刚安装好glib)，或者修改 <code>ld.so.conf</code> 增加新的库路径后，需要运行一下 <code>/sbin/ldconfig</code> 使所有的库文件都被缓存到 <code>ld.so.cache</code> 中。 否则 <code>ld.so.conf</code> 的更改不生效。</p></div><h3 id="静态编译" tabindex="-1"><a class="header-anchor" href="#静态编译"><span>静态编译</span></a></h3><p>一般在“裸机”上跑的程序会考虑使用静态链接编译，避免动态链接缺失的情况</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p><strong>Linux 和 裸机（baremetal） 区别</strong>：</p><ul><li>Linux —— 在已安装操作系统的机器上跑。一般：个人pc、公司服务器</li><li>baremetal —— 直接由硬件调起。一般：嵌入式</li></ul></div><p>编译参数：</p><ul><li>gcc —— <code>-static</code></li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>静态编译的二进制通过 <code>ldd</code> 可以看到 &quot;not a dynamic executable&quot; 的字样。 而 <s><code>-nostdlib</code></s> 通过 <code>ldd</code> 看到的是 &quot;statically linked&quot;，这表示 “它恰好没有链接到任何库，但在其他方面与普通 PIE 相同，指定了 ELF 解释器。”</p><p>todo What&#39;s the difference between &quot;statically linked&quot; and &quot;not a dynamic executable&quot; from Linux ldd? | <a href="https://stackoverflow.com/questions/61553723/whats-the-difference-between-statically-linked-and-not-a-dynamic-executable" target="_blank" rel="noopener noreferrer">https://stackoverflow.com/questions/61553723/whats-the-difference-between-statically-linked-and-not-a-dynamic-executable</a></p></div><h3 id="交叉编译" tabindex="-1"><a class="header-anchor" href="#交叉编译"><span>交叉编译</span></a></h3><p>“交叉编译” 指在一个平台上生成另一个平台上的可执行文件。</p><p>一般要用到如下编译工具（todo 各工具作用）</p><ul><li>gcc</li><li>ld</li><li>objcopy</li><li>objdump</li></ul><p>交叉编译工具链</p><ul><li><code>arm-linux-gcc</code></li><li><code>arm-none-linux-gnueabi-gcc-ld</code></li></ul><p>e.g. 交叉编译脚本</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">install_arm32</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> apt</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gcc</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> make</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gcc-arm-linux-gnueabi</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> binutils-arm-linux-gnueabi</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">install_arm64</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> apt</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gcc</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> make</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gcc-aarch64-linux-gun</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> binutils-aarch64-linux-gnu</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">gen_hello</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  cat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">helloworld.c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;&lt; </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">EOF</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">#include&lt;stdio.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">int main()</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">{</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  printf(&quot;Hello World!\\n&quot;);</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  return 0;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">EOF</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">compile_64</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  gcc</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> helloworld.c</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -o</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> helloworld-x86_64</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">compile_arm32</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  arm-linux-gnueabi-gcc</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> helloworld.c</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -o</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> helloworld-arm</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -static</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">compile_arm64</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  aarchi64-linux-gnu-gcc</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> helloworld.c</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -o</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> helloworld-aarch64</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -static</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Main.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># install_arm32</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># install_arm64</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">gen_hello</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">compile_64</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> || </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">exit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">compile_arm32</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">compile_arm64</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="编译原理" tabindex="-1"><a class="header-anchor" href="#编译原理"><span>编译原理</span></a></h2><p>todo</p><h2 id="安全加固" tabindex="-1"><a class="header-anchor" href="#安全加固"><span>安全加固</span></a></h2><p>todo</p><p><code>nm</code> 可以查看 elf 文件的符号信息</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gcc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -c</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> test.c</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> test.o</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">00000000</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> B</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> global</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">00000000</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> T</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> main</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">          U</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> printf</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,52))])}const v=k(g,[["render",y]]),m=JSON.parse('{"path":"/zh/dev-c-commonsense/gcc.html","title":"GCC 使用笔记","lang":"zh-CN","frontmatter":{"title":"GCC 使用笔记","order":10,"description":"GCC（GNU Compiler Collection，GNU编译程序集合）是GNU项目的一个开放源码产品，用于完成C语言代码的编译。如Python就是由C语言开发，由GNU编译程序编译的！ GCC官网地址： https://gcc.gnu.org/ GCC官方文档： https://gcc.gnu.org/onlinedocs/","head":[["meta",{"property":"og:url","content":"https://lawsssscat.github.io/blog/zh/blog/zh/dev-c-commonsense/gcc.html"}],["meta",{"property":"og:site_name","content":"个人博客"}],["meta",{"property":"og:title","content":"GCC 使用笔记"}],["meta",{"property":"og:description","content":"GCC（GNU Compiler Collection，GNU编译程序集合）是GNU项目的一个开放源码产品，用于完成C语言代码的编译。如Python就是由C语言开发，由GNU编译程序编译的！ GCC官网地址： https://gcc.gnu.org/ GCC官方文档： https://gcc.gnu.org/onlinedocs/"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-23T16:47:25.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-23T16:47:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"GCC 使用笔记\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-23T16:47:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Steven\\",\\"url\\":\\"https://github.com/LawssssCat/\\"}]}"]]},"headers":[{"level":2,"title":"基础概念","slug":"基础概念","link":"#基础概念","children":[{"level":3,"title":"常见文件、软件","slug":"常见文件、软件","link":"#常见文件、软件","children":[]},{"level":3,"title":"编译过程","slug":"编译过程","link":"#编译过程","children":[{"level":4,"title":"制作可执行文件","slug":"制作可执行文件","link":"#制作可执行文件","children":[]},{"level":4,"title":"制作库文件","slug":"制作库文件","link":"#制作库文件","children":[]},{"level":4,"title":"文件后缀","slug":"文件后缀","link":"#文件后缀","children":[]},{"level":4,"title":"常用编译选项","slug":"常用编译选项","link":"#常用编译选项","children":[]},{"level":4,"title":"查看ELK信息","slug":"查看elk信息","link":"#查看elk信息","children":[]}]},{"level":3,"title":"头文件","slug":"头文件","link":"#头文件","children":[]},{"level":3,"title":"configure","slug":"configure","link":"#configure","children":[]},{"level":3,"title":"pkg-config 链接库配置生成器","slug":"pkg-config-链接库配置生成器","link":"#pkg-config-链接库配置生成器","children":[]},{"level":3,"title":"动态链接","slug":"title-dynamic-link","link":"#title-dynamic-link","children":[{"level":4,"title":"动态链接器（dynamic linker/loader）","slug":"动态链接器-dynamic-linker-loader","link":"#动态链接器-dynamic-linker-loader","children":[]},{"level":4,"title":"运行时库的连接 LD_LIBRARY_PATH","slug":"运行时库的连接-ld-library-path","link":"#运行时库的连接-ld-library-path","children":[]}]},{"level":3,"title":"静态编译","slug":"静态编译","link":"#静态编译","children":[]},{"level":3,"title":"交叉编译","slug":"交叉编译","link":"#交叉编译","children":[]}]},{"level":2,"title":"编译原理","slug":"编译原理","link":"#编译原理","children":[]},{"level":2,"title":"安全加固","slug":"安全加固","link":"#安全加固","children":[]}],"git":{"createdTime":1758452374000,"updatedTime":1758646045000,"contributors":[{"name":"lawsssscat","username":"lawsssscat","email":"18041500+LawssssCat@users.noreply.github.com","commits":6,"url":"https://github.com/lawsssscat"}]},"readingTime":{"minutes":18.24,"words":5472},"filePathRelative":"zh/dev-c-commonsense/gcc.md","localizedDate":"2025年9月21日","excerpt":"<p>GCC（GNU Compiler Collection，GNU编译程序集合）是GNU项目的一个开放源码产品，用于完成C语言代码的编译。如Python就是由C语言开发，由GNU编译程序编译的！</p>\\n<p>GCC官网地址： <a href=\\"https://gcc.gnu.org/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://gcc.gnu.org/</a> <br>\\nGCC官方文档： <a href=\\"https://gcc.gnu.org/onlinedocs/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://gcc.gnu.org/onlinedocs/</a></p>\\n","autoDesc":true}');export{v as comp,m as data};
