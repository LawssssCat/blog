import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,d as t,o as a}from"./app-yV4LJ0US.js";const n={};function s(r,e){return a(),i("div",null,[...e[0]||(e[0]=[t(`<p>理解后可以尝试 “<a href="https://linuxtoy.org/archives/free-software-licensing-quiz.html" target="_blank" rel="noopener noreferrer">自由软件许可证知识测验</a>”。</p><hr><h2 id="依赖识别" tabindex="-1"><a class="header-anchor" href="#依赖识别"><span>依赖识别</span></a></h2><p>无明确构建配置文件的项目，如 C/C++ 使用 Makefile 类的项目，则根据编译过程中具体执行的依赖行为进行判别。</p><p>存在构建配置文件的项目，如 Java 的 <code>pom.xml</code> 文件，通过对应的依赖管理器作为识别依据。</p><blockquote><p><strong>为什么只能作为依据？</strong></p><p>存在跳脱依赖管理器识别规则的依赖，如 Spring 的 <code>spring-boot-loader</code> 依赖是通过 <code>spring-boot-maven-plugin</code> 在打包时注入的，没法通过 maven 识别出来。</p></blockquote><p>e.g.</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># java</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mvn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dependencies</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># python</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pipenv</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> graph</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># go</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mod</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> graph</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>语言</th><th>包管理工具</th><th>依赖配置文件</th><th>groupId</th><th>packageName</th><th>version</th></tr></thead><tbody><tr><td>Java</td><td>Maven</td><td>pom.xml</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>Java</td><td>Gradle</td><td>build.gradle</td><td></td><td>✅</td><td>✅</td></tr><tr><td>JavaScript</td><td>NPM</td><td>package.json</td><td></td><td>✅</td><td>✅</td></tr><tr><td>Python</td><td>PyPi</td><td>requirements.txt</td><td></td><td>✅</td><td>✅</td></tr><tr><td>Go</td><td>gomod</td><td>go.mod</td><td></td><td>✅</td><td>✅</td></tr><tr><td>Rust</td><td>cargo</td><td>Cargo.toml</td><td></td><td>✅</td><td>✅</td></tr></tbody></table><h2 id="依赖软件选型能力重要性" tabindex="-1"><a class="header-anchor" href="#依赖软件选型能力重要性"><span>依赖软件选型能力重要性</span></a></h2><p>从能力划分上看，无论设计/开发/测试，高级工程师必备依赖选型能力。</p><table><thead><tr><th>能力划分</th><th>入门</th><th>初级</th><th>中级</th><th>高级</th></tr></thead><tbody><tr><td>设计</td><td>特性分析</td><td>跨模块特性分析</td><td>软件技术规划（BP，Business Plan）</td><td>软件技术洞察（SP，Strategy Plan）</td></tr><tr><td>开发</td><td>编写核心代码</td><td>Committer</td><td>Maintainer</td><td>架构、规划</td></tr><tr><td>测试</td><td>开发者测试（DT，Developer Test）</td><td>系统设计验证（SDV，System Design Verify）</td><td>测试框架设计</td><td>测试流程设计</td></tr></tbody></table><h2 id="软件定义" tabindex="-1"><a class="header-anchor" href="#软件定义"><span>软件定义</span></a></h2><p>todo</p><h2 id="软件信息" tabindex="-1"><a class="header-anchor" href="#软件信息"><span>软件信息</span></a></h2><p>基本信息：</p><ul><li>基本属性 —— 名称、语言、官网、作者、社区地址</li><li>版本属性 —— 版本编号、证书（license）、发布时间（Release Date）、源码、编译二进制、数字签名、版权（copyright）</li></ul><p>开源社区 EOL 时间： （大部分社区无 EOL 时间，采用滚动演进式发布）</p><ul><li>Spring Boot 1Y</li><li>PHP 3Y</li><li>Node.js 3Y</li><li>Kernel 4~6Y</li><li>...</li></ul><p>生态：</p><ul><li>软件供应商 —— 百度（baidu）、阿里（alibaba）、华为（huawei）、红帽（RedHat）、英特尔（Intel）、...</li><li>软件社区/基金会 —— Linux、Apache、Eclipse、OpenStack（Open Infrastructure）、mozilla、Linaro、OpNFV、...</li><li>云原生社区 —— <a href="https://www.cncf.io/enduser/" target="_blank" rel="noopener noreferrer">cncf</a></li></ul><p>质量：</p><ul><li>不安全函数数量/密度</li><li>圈复杂度</li><li>重复度</li><li>调试能力（是否可开启/关闭）</li><li>自动化构建能力</li></ul><h3 id="名称" tabindex="-1"><a class="header-anchor" href="#名称"><span>名称</span></a></h3><p>项目名称： <code>[组织] + 软件名称</code></p><h3 id="开发商" tabindex="-1"><a class="header-anchor" href="#开发商"><span>开发商</span></a></h3><p>项目的主要版权所有者/管理者/发布者，可以为组织/个人。</p><h3 id="官网地址" tabindex="-1"><a class="header-anchor" href="#官网地址"><span>官网地址</span></a></h3><p>官网/托管地址</p><h3 id="源码仓地址" tabindex="-1"><a class="header-anchor" href="#源码仓地址"><span>源码仓地址</span></a></h3><p>代码托管仓库地址</p><ul><li>git 地址</li><li>源码下载地址</li><li>二进制下载地址</li></ul><h3 id="主要语言" tabindex="-1"><a class="header-anchor" href="#主要语言"><span>主要语言</span></a></h3><ul><li><p>C/C++</p></li><li><p>Java</p></li><li><p>JavaScript</p></li><li><p>Python</p></li><li><p>Go</p></li><li><p>Rust</p></li><li><p>TypeScript</p></li><li><p>Scala</p></li><li><p>Lua</p></li><li><p>Dart</p></li><li><p>Swift</p></li><li><p>Erlang</p></li></ul><p>扫描工具： cloc</p><h3 id="copyright" tabindex="-1"><a class="header-anchor" href="#copyright"><span>Copyright</span></a></h3><p>e.g.</p><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" data-title="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Copyright (c) XXXX人名/公司名</span></span>
<span class="line"><span>Copyright © XXXX人名/公司名</span></span>
<span class="line"><span>Copyright XXXX人名/公司名</span></span>
<span class="line"><span>(c) XXXX人名/公司名</span></span>
<span class="line"><span>© XXXX人名/公司名</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="license" tabindex="-1"><a class="header-anchor" href="#license"><span>License</span></a></h3><p>开源协议</p><h4>GPLv2，General Public License 【传染性】</h4><h5>GPL 版本</h5><p>GPL 总共有三个版本</p><ul><li>GPLv1：1989 年 2 月 25 日发布。</li><li><a href="https://www.gnu.org/licenses/old-licenses/gpl-2.0.txt" target="_blank" rel="noopener noreferrer"><strong>GPLv2</strong></a>（<a href="https://www.gnu.org/licenses/gpl-faq.html" target="_blank" rel="noopener noreferrer">FAQ</a>）：1991 年 6 月发布。</li><li>GPLv3：2007 年 6 月 29 日发布。</li></ul><p>每一个版本之间是有区别的，大部分使用 GPL 开源软件都是使用 GPLv2 的开源协议，因此默认下面说的都是 GPLv2 的规则。</p><h5>GPLv2 生效范围</h5><p>生效范围：</p><ul><li><p>产品属于 “GPL 衍生作品（a work based on the Program）”</p><p>是否属于 GPL 衍生作品，有以下两种情况</p><ol><li>产品直接使用 GPL 代码或者使用 GPL 静态库 —— 产品属于 GPL 衍生作品</li><li>产品动态链接 GPL 动态库 —— 如果一起分发，则属于 GPL 衍生作品；如果不是一起分发，则 “可能” 以 “独立性和可区分性”（Separate and Independent） 为由不属于 GPL 衍生作品</li></ol></li><li><p>产品对外分发（redistribution）或分销</p></li></ul><p>使用 GPL 的软件如： Linux Kernel / Busybox / openjdk / ...</p><blockquote><p><strong>Linux 内核使用 GPL 引发的问题：</strong></p><p>理论上一个 Linux GPL 的操作系统核心运行在 “ 内核空间 ” ，上层的类库、框架、服务、应用运行在 “ 用户空间 ” 。 用户空间上的任何服务不可避免的需要 Linux 内核的头文件，进行系统调用，因此，中间层服务必须遵循 GPL 进行开放源代码。 调用中间服务层的框架或者其他服务使用了 GPL 的类库，因此，也必须是 GPL 的。 同理，上层应用也被 “ 传染 ” ，必须是 GPL 的。 于是，理论上从内核到驱动到中间服务到上层应用，形成了一个 GPL 一体化软件授权的软件发布整体。 可以认为，这个整体上任何开发成果都是 GPL 的，除非极少数的例外程序能够证明自身独立于系统的 GPL 环境。 这样的一个 “软件闭包” 排斥的商业化的软件模块以及 “想要钱” 普通开发者，将整个软件世界划分为 “ GPL 与 GPL 兼容的” 的和非 GPL 的，每个开发从业者面临着选择，要么 Linux + GPL ，要么 Linux 与你无关。</p><p>针对上述情况，有三个主要的问题：</p><ol><li><strong>使用 Linux 内核的头文件定义，进行系统调用的程序是否会被定性为衍生产品？</strong> 对该问题已有定论： 否 —— “普通系统调用为非 GPL 的作用范围” （系统调用可以理解为 Linux API 的接口调用） —— 这被 Linus Torvalds 以及内核开发人员多次澄清，甚至固化在 Linux 内核的源码 COPYING 文档中，为 Linux 用户空间的程序采用非 GPL 的授权许可证打下了基础。</li><li><strong>链接使用了其他 GPL 的类库的程序是否会被定性为衍生产品？</strong> 对该问题也已有定论： 是 —— 一旦程序使用了 GPL 的模块，本身即被传染，程序必须成为 GPL。若要规避，也是可能的：必须证明主程序与 GPL 模块之间具有 “独立性和可区分性”（Separate and Independent）。</li><li><strong>Linux 内核动态载入的模块 LKM（Loadable Kernel Modules）是否会被定性为衍生产品，以 LKM 形式开发的 Linux 驱动程序是不是衍生产品？</strong> 对该问题仍有争论： 硬件厂商如图形显示设备厂商 AMD/ATI、NVidia 出自硬件规格保密以及知识产权的考虑，长期以二进制软件包的方式独立发布图形驱动，涉嫌违反了 Linux 内核开放源代码的软件授权协议 GPL。这至今仍是 Unity 与 Gnome 3 等依赖于硬件图形加速的新型桌面技术发展上的一大阴影。</li></ol></blockquote><h5>GPLv2 开源义务</h5><p>“GPL 衍生作品” 开源义务：</p><ul><li>产品本身需要 GPL 开源</li><li>产品使用的静态链接库（Linux 的<code>.a</code>和 Windows 的<code>.lib</code>）需要 GPL 开源</li><li>产品使用的动态链接库（Linux 的<code>.so</code>，Windows 的<code>.dll</code>）需要 GPL 兼容（即 GPL 软件中可以使用的库。<a href="https://en.wikipedia.org/wiki/Comparison_of_free_and_open-source_software_licenses" target="_blank" rel="noopener noreferrer">link:List of FSF（Free Software Foundation） approved software licenses</a>）</li></ul><h5>规避方式</h5><ul><li>产品不分发 —— 用户使用产品时，没有直接获取软件本身</li><li>让不属于 GPL 衍生作品 <ul><li>插件模式 —— 通过动态链接形式调用 GPL 功能；分发时，该动态链接以 “插件” 形式分开分发</li><li>进程隔离 —— 通过进程间通信来交互（如通过插件、API 调用等方式与 GPL 软件交互）</li></ul></li></ul><p>规避例子：</p><ul><li><p><strong>Android 模式</strong> —— 把 GPL 局限在内核空间</p><ul><li>应用软件层面： Linux 操作系统之上构建软件一般都会需要 c 运行时库的支持即 GPL 协议的 glibc。而 Android 采用了 Free BSD 的 Bionic Libc 作为替代的运行时库，该类库上层更是采用 “温和” 的 Apache-2.0 的软件授权进行发布；</li><li>驱动层面： Android 采用了一个 HAL（Hardware Abstraction Layer） 层，将用户驱动运行在 userspace，通过系统调用完成驱动，把本来跟 Linux 内核一起运行的驱动变成了驱动运行在 Linux 之上；</li></ul><blockquote><p>依据： 用户空间（userspace）的类库以及程序使用 Linux 内核的系统调用不被视为是 Linux 内核的衍生产品</p></blockquote></li><li><p><strong>OpenJDK 模式</strong> —— 把 GPL 限制在虚拟机层面</p><ul><li>虚拟机（JVM，HotSpot）使用 GPLv2 协议；</li><li>类库和 JVM 的 API 调用封装使用 <a href="https://openjdk.org/legal/gplv2+ce.html" target="_blank" rel="noopener noreferrer">GPLv2 + CE，GPL with Classpath Exception</a> 协议 —— 这种协议允许后面的开发者，如果只是 <code>import</code> OpenJDK 的类库或者 JVM 的 API 调用封装的话，可以不受 GPL 限制。 甚至可以闭源，如 WebLogic, WebSphere 这也是为什么 Oracle JDK 可以兜售商业许可的原因 另外，GPL with Classpath Exception 规定如果修改了 OpenJDK 源码然后还还二次分发，则必须继承协议，这有效规范 JVM 的实现，即减少魔改 JDK（如 Scala / Kotlin / Clojure / ...） 的出现。</li></ul><blockquote><p>依据：</p><ul><li>JVM 使用 GPL 动态/静态链接库，所以必须 GPL 协议</li><li>类库以及 JVM 的 API 调用与 JVM 甚至没有链接关系，它们只是在 JVM 上运行（也就是被 JVM 调用），所以不再 GPL 协议生效范围内</li></ul></blockquote></li><li><p><strong>SaaS 模式</strong> —— GPLv2 规定任何人都可以以提供技术服务为目的，运行私有修改的 GPL 许可下的程序，只要不发布软件，则不需要公开源代码。 由于在 SaaS 服务场景中，用户通过云端访问软件，软件商不存在将软件源代码提供给用户的实质动作，也就没有触及 GPL 协议中“分发（Distribute）”的概念，也因此，GPL 协议被认为是拥有“SaaS Loophole”（SaaS 服务漏洞）。</p><p>在很长一段时间内，没有成规模的开源许可证可以针对性地对 SaaS 服务进行约束，因而 GPL 类开源软件的传染性对 SaaS 场景失效。</p><p>更多： 为 SaaS 而生的 AGPL 和 SSPL 协议</p></li><li><p><strong>插件模式</strong> —— 通过动态链接，以 “独立性和可区分性”（Separate and Independent） 来避免被认为是 “GPL 衍生作品”。</p></li></ul><h4>AGPLv3，GNU Affero General Public License</h4><p>面对 SaaS 服务的崛起，出于保护其自研软件的目的，Affero Inc.发布了 AGPL v1，以限制 SaaS 服务提供商对其自研软件的自由使用。 自由软件基金会（FSF，Free Software Foundation）又在此基础上发布了 AGPL v3，后续被广泛应用到各个开源软件中。</p><p>根据 AGPLv3 协议第 13 条的约定： 如果对 AGPL 开源软件进行了修改（Modify），则需要向所有通过计算机远程网络交互的用户免费提供相应的源代码。</p><blockquote><p><strong>“通过计算机远程网络交互” 的场景</strong>： 包括网络和邮件服务器、基于互动的网络应用程序和在线播放的游戏服务器等，当然这也包括 SaaS 服务。</p></blockquote><blockquote><p><strong>对 AGPL 的修改</strong>： 在 SaaS 应用场景下，触发 AGPL 协议传染性的条件是对原 AGPL 程序进行了“修改（Modify）”。 也就是如果对 AGPL 程序进行了修改，那么需要开源包括 AGPL 修改版程序在内的帮助运行 SaaS 服务的所有程序的源代码，也就是进行整体开源。 在实践中，大多数 SaaS 服务商为了避免自研代码泄露的风险，对 AGPL 软件一律采取强硬的拒绝态度。例如，谷歌在其内部政策中明确禁止开发者使用 AGPL 软件。</p></blockquote><p>涉及软件： Humhub / Grafana / MongoDB（后改用 SSPL） / ...</p><p>规避方式： 同 GPLv2</p><h4>SSPL，Server Side Public License</h4><blockquote><p>进阶的 AGPL：SSPL</p></blockquote><p>2018 年，MongoDB Inc. 宣布其开发的 MongoDB 开源软件不再适用 AGPL v3，而是改用 SSPL 开源。</p><p>SSPL 许可协议第 13 条中明确规定： 如果将 SSPL 程序或程序的修改版本的功能作为服务向第三方提供时，则需要提供服务源代码。</p><blockquote><p><strong>扩大的生效范围</strong>： SSPL 不再将 “修改（Modify）” 作为触发开源传染性的条件。 而是明确了，如果在为 SaaS 服务开发的软件中使用了 SSPL 软件，那么需要把所有使该软件能运行成 SaaS 服务的相应源码都进行开源。</p><p><strong>扩大的开源范围</strong>： 第 13 条明确了需要开源的 “服务源代码” 包括但不限于 “管理软件、用户界面、应用程序接口、自动化软件、监控软件、备份软件、存储软件和托管软件，所有这些都是为了让用户可以使用您提供的服务源代码运行服务实例”，也就是说开源范围不仅仅包括了本程序的源码、还要包括和本程序配套使用的所有程序的源码。 <s>粗暴的理解： 如果提供服务的 “本程序” 中包含了 SSPL 组件，“你就要大方地把提供服务的整个配套程序（包括前后台）都贡献出来”。</s></p></blockquote><p>涉及软件： MongoDB / Elasticsearch / ...</p><p>规避方式：</p><ul><li>仅内部使用，不分发</li><li>购买商业协议</li></ul><h4>LGPL，Lesser GPL</h4><p>LGPL 定义： 如果修改 LGPL 发布的库，新的库必须以 LGPL 发布。如果仅是动态链接，那么则不受任何限制。</p><p>生效范围：</p><ul><li>产品使用</li><li>产品分发</li></ul><p>开源义务：</p><ul><li>如果与 LGPL 静态链接，则必须以 LGPL 开源</li><li>如果与 LGPL 动态链接，则不受限制</li></ul><p>例如： Hibernate / glibc / ...</p><p>规避方式：</p><ul><li>动态链接引用</li></ul><h4>MPL 类，如：MPL/EPL/...</h4><p>生效范围：</p><ul><li>源码修改</li><li>产品使用</li><li>产品分发</li></ul><p>开源义务：</p><ul><li>若无修改，则无需开源</li><li>若修改了，则需开源修改部分</li></ul><p>例如： FireFox / Eclipse / ...</p><p>规避方式：</p><ul><li>不修改</li></ul><h4>BSD 类：Apache/BSD/MIT/...</h4><h5>Apache 2.0</h5><ul><li>Apache 2.0 发布的软件代码，而不需要开放源代码，只需要提及代码的原出处就可以。例如： Android / Tomcat / Spring / ...</li></ul><h2 id="版本信息" tabindex="-1"><a class="header-anchor" href="#版本信息"><span>版本信息</span></a></h2><h3 id="版本号" tabindex="-1"><a class="header-anchor" href="#版本号"><span>版本号</span></a></h3><p>非正式版：</p><ul><li>alpha</li><li>beta</li><li>RC + num</li><li>master</li><li>trunk</li><li>r + num</li><li>...</li></ul><h2 id="选型风险" tabindex="-1"><a class="header-anchor" href="#选型风险"><span>选型风险</span></a></h2><h3 id="专利风险" tabindex="-1"><a class="header-anchor" href="#专利风险"><span>专利风险</span></a></h3><p>专利问题： todo</p><blockquote><p>e.g. 专利流氓 SCO（Santa Cruz Operation）公司曾对 IBM 公司发起专利起诉，并获利 1425 万美金。</p></blockquote><p><a href="https://openinventionnetwork.com/linux-system/" target="_blank" rel="noopener noreferrer">OIN（Open Invention Network）组织</a>： 防御性的专利池社区。 OIN 成员间可进行 Linux 相关专利的交叉许可。 任何从事 Linux、GNU、Android 等软件开发的团队都可以加入 OIN。</p><h3 id="安全风险" tabindex="-1"><a class="header-anchor" href="#安全风险"><span>安全风险</span></a></h3><ul><li>下载的二进制对比数字签名</li><li>跟踪漏洞披露和修复情况 <ul><li>项目披露 <ul><li>Github 上的 Security</li><li>Xen 的漏洞披露 <a href="https://xenbits.xen.org/xsa/" target="_blank" rel="noopener noreferrer">https://xenbits.xen.org/xsa/</a></li><li>Openssl 的漏洞披露 <a href="https://www.openssl.org/news/vulnerabilities.html" target="_blank" rel="noopener noreferrer">https://www.openssl.org/news/vulnerabilities.html</a></li><li>Spring 的漏洞披露 <a href="https://spring.io/security" target="_blank" rel="noopener noreferrer">https://spring.io/security</a></li><li>Samba 的漏洞披露 <a href="https://www.samba.org/samba/history/security.html" target="_blank" rel="noopener noreferrer">https://www.samba.org/samba/history/security.html</a></li><li>Linux Kernel 的漏洞披露 （非官方，官方没有开放相关地址） <ul><li><a href="https://linuxkernelcves.com/" target="_blank" rel="noopener noreferrer">https://linuxkernelcves.com/</a></li><li><a href="https://github.com/nluedtke/linux_kernel_cves/tree/master/data" target="_blank" rel="noopener noreferrer">https://github.com/nluedtke/linux_kernel_cves/tree/master/data</a></li></ul></li></ul></li><li>漏洞库披露 <ul><li>https://nvd.nist.gov/</li><li>https://www.cvedetails.com/</li><li>https://cve.mitre.org/</li><li>https://vuldb.com/</li><li>https://www.rapid7.com/</li><li>https://snyk.io/vuln</li><li>https://www.cnvd.org.cn/</li><li>https://www.cnnvd.org.cn/</li></ul></li></ul></li></ul><h2 id="依赖选型" tabindex="-1"><a class="header-anchor" href="#依赖选型"><span>依赖选型</span></a></h2><p>选型原则：</p><ul><li>生命周期 —— 留意依赖生命周期，不选衰退期依赖 <ul><li>不选 EOL（End of Life，生命终止） 的依赖，因为有漏洞修复也只会合入到新版本中，不会合入到 EOL 的版本中。</li><li>可选 LTS（Long time Support，长期支持） 的依赖，因为社区承诺长期支持。</li></ul></li><li>版本更新 —— 优选较新的稳定版本 <ul><li>RC（Released Candidate，发布候选）</li></ul></li><li>版本归一 —— 一个依赖在整个产品中（尽量）只有一个版本</li><li>全量引入 —— 不片段引入依赖</li><li>全量监控 —— 除了关注产品直接依赖的软件/组件，还需要关注这些依赖所依赖的软件/组件</li></ul><h2 id="漏洞修复" tabindex="-1"><a class="header-anchor" href="#漏洞修复"><span>漏洞修复</span></a></h2><ul><li>补丁回合方式</li><li>版本升级方式</li></ul><h3 id="回合补丁方式" tabindex="-1"><a class="header-anchor" href="#回合补丁方式"><span>回合补丁方式</span></a></h3><p>回合（backport，往回合入或向后移植）补丁 —— 从新代码中，将更改回合到老代码中的补丁</p><p>回合情况有以下两种：</p><ol><li>开源社区新版本的修改回合到用户使用的老版本中</li><li>用户在老版本中开发的新特性或自研修复的缺陷回合到社区的开发版本中</li></ol><blockquote><p>“漏洞修复” 中主要记录从开源社区回合补丁到开发者分支情况。 “分支回合” （下面） 中主要记录开发者分支修改回合到开源社区情况。</p></blockquote><p>缺陷一般不是一次提交就能解决的，而是由某一个关键提交解决，这个关键提交还有一些前置提交。 为了更方便的分析哪些代码需要被回合，将补丁分为下面几种：</p><ol><li><p>关键补丁 —— 缺陷最终会体现到某个文件，根据文件的修改记录（<code>git log [options] 文件相对路径</code>）可以直观识别到的解决问题的提交。这一般是补丁分析的切入点、抓手</p></li><li><p>前置补丁</p><p>关键补丁前的提交都是前置补丁，接下来就要分析哪些是缺陷相关的</p><ul><li>直接前置补丁 —— 和缺陷相关的前置补丁</li><li>间接前置补丁 —— 和缺陷相关文件的修改均没有直接关系的前置补丁 （❗ 没有直接关系不代表没关系，缺少分析可能有坑）</li></ul></li><li><p>后置补丁 —— 修补关键补丁缺陷的补丁</p><p>这种补丁一般比较隐蔽，难以发现，查找方式一般是通过这些关键补丁和前置补丁的提交号进行过滤。 （❗ 没有过滤出来不代表没有后置补丁，这是规范问题，但是开软软件提交往往没有统一的规范，可能导致补丁漏合）</p></li></ol><p><strong>补丁漏合的分析和处理</strong>：</p><p>todo https://blog.csdn.net/canpool/article/details/121964286</p><h3 id="版本升级方式" tabindex="-1"><a class="header-anchor" href="#版本升级方式"><span>版本升级方式</span></a></h3><h2 id="分支回合" tabindex="-1"><a class="header-anchor" href="#分支回合"><span>分支回合</span></a></h2><p><strong>分支背景</strong></p><p>多种情况下，对源码定制修改：</p><p>todo</p><p>这些定制修改分支不及时合入开源社区主干的话，差异会逐步拉大，也就是修改/测试成本会逐步拉大。</p><p><strong>分支消除</strong></p><p>对定制的分支，需要考虑如何与开源社区版本协同演进。</p><p>分支消除情况有以下情况：</p><ul><li>社区回合分支</li><li>社区已有类似功能</li><li>定制功能不再需要</li></ul><p>社区回合分支的话，需要考虑：</p><ul><li>较大的架构调整 —— 大概率不适合回合</li><li>有社区主导权 —— 适合协同演进</li><li>源码交付 —— 看商业需求，是否可以交付社区主分支代码（存在大量不需要的代码/功能）</li></ul><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><ul><li>Copyleft 和 GFDL 许可证 https://www.ruanyifeng.com/blog/2008/04/copyleft_and_gfdl.html</li><li>Android ，在争议中逃离 Linux 内核的 GPL 约束 https://www.ifanr.com/92261</li><li>“开源合规”系列之三 — SaaS 应用场景下的开源合规 https://www.lexology.com/library/detail.aspx?g=34e521c4-63a8-4185-9175-e43b7f09d25c</li></ul>`,131)])])}const d=l(n,[["render",s]]),h=JSON.parse('{"path":"/zh/dev-se-opensource/","title":"依赖软件选型","lang":"zh-CN","frontmatter":{"title":"依赖软件选型","date":"2023-10-01T00:00:00.000Z","order":1,"description":"理解后可以尝试 “自由软件许可证知识测验”。 依赖识别 无明确构建配置文件的项目，如 C/C++ 使用 Makefile 类的项目，则根据编译过程中具体执行的依赖行为进行判别。 存在构建配置文件的项目，如 Java 的 pom.xml 文件，通过对应的依赖管理器作为识别依据。 为什么只能作为依据？ 存在跳脱依赖管理器识别规则的依赖，如 Spring 的...","head":[["meta",{"property":"og:url","content":"https://lawsssscat.github.io/blog/zh/blog/zh/dev-se-opensource/"}],["meta",{"property":"og:site_name","content":"个人博客"}],["meta",{"property":"og:title","content":"依赖软件选型"}],["meta",{"property":"og:description","content":"理解后可以尝试 “自由软件许可证知识测验”。 依赖识别 无明确构建配置文件的项目，如 C/C++ 使用 Makefile 类的项目，则根据编译过程中具体执行的依赖行为进行判别。 存在构建配置文件的项目，如 Java 的 pom.xml 文件，通过对应的依赖管理器作为识别依据。 为什么只能作为依据？ 存在跳脱依赖管理器识别规则的依赖，如 Spring 的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-08T14:40:04.000Z"}],["meta",{"property":"article:published_time","content":"2023-10-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-08T14:40:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"依赖软件选型\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-12-08T14:40:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Steven\\",\\"url\\":\\"https://github.com/LawssssCat/\\"}]}"]]},"headers":[{"level":2,"title":"依赖识别","slug":"依赖识别","link":"#依赖识别","children":[]},{"level":2,"title":"依赖软件选型能力重要性","slug":"依赖软件选型能力重要性","link":"#依赖软件选型能力重要性","children":[]},{"level":2,"title":"软件定义","slug":"软件定义","link":"#软件定义","children":[]},{"level":2,"title":"软件信息","slug":"软件信息","link":"#软件信息","children":[{"level":3,"title":"名称","slug":"名称","link":"#名称","children":[]},{"level":3,"title":"开发商","slug":"开发商","link":"#开发商","children":[]},{"level":3,"title":"官网地址","slug":"官网地址","link":"#官网地址","children":[]},{"level":3,"title":"源码仓地址","slug":"源码仓地址","link":"#源码仓地址","children":[]},{"level":3,"title":"主要语言","slug":"主要语言","link":"#主要语言","children":[]},{"level":3,"title":"Copyright","slug":"copyright","link":"#copyright","children":[]},{"level":3,"title":"License","slug":"license","link":"#license","children":[{"level":4,"title":"GPLv2，General Public License 【传染性】","slug":"gplv2-general-public-license-【传染性】","link":"#gplv2-general-public-license-【传染性】","children":[{"level":5,"title":"GPL 版本","slug":"gpl-版本","link":"#gpl-版本","children":[]},{"level":5,"title":"GPLv2 生效范围","slug":"gplv2-生效范围","link":"#gplv2-生效范围","children":[]},{"level":5,"title":"GPLv2 开源义务","slug":"gplv2-开源义务","link":"#gplv2-开源义务","children":[]},{"level":5,"title":"规避方式","slug":"规避方式","link":"#规避方式","children":[]}]},{"level":4,"title":"AGPLv3，GNU Affero General Public License","slug":"agplv3-gnu-affero-general-public-license","link":"#agplv3-gnu-affero-general-public-license","children":[]},{"level":4,"title":"SSPL，Server Side Public License","slug":"sspl-server-side-public-license","link":"#sspl-server-side-public-license","children":[]},{"level":4,"title":"LGPL，Lesser GPL","slug":"lgpl-lesser-gpl","link":"#lgpl-lesser-gpl","children":[]},{"level":4,"title":"MPL 类，如：MPL/EPL/...","slug":"mpl-类-如-mpl-epl","link":"#mpl-类-如-mpl-epl","children":[]},{"level":4,"title":"BSD 类：Apache/BSD/MIT/...","slug":"bsd-类-apache-bsd-mit","link":"#bsd-类-apache-bsd-mit","children":[{"level":5,"title":"Apache 2.0","slug":"apache-2-0","link":"#apache-2-0","children":[]}]}]}]},{"level":2,"title":"版本信息","slug":"版本信息","link":"#版本信息","children":[{"level":3,"title":"版本号","slug":"版本号","link":"#版本号","children":[]}]},{"level":2,"title":"选型风险","slug":"选型风险","link":"#选型风险","children":[{"level":3,"title":"专利风险","slug":"专利风险","link":"#专利风险","children":[]},{"level":3,"title":"安全风险","slug":"安全风险","link":"#安全风险","children":[]}]},{"level":2,"title":"依赖选型","slug":"依赖选型","link":"#依赖选型","children":[]},{"level":2,"title":"漏洞修复","slug":"漏洞修复","link":"#漏洞修复","children":[{"level":3,"title":"回合补丁方式","slug":"回合补丁方式","link":"#回合补丁方式","children":[]},{"level":3,"title":"版本升级方式","slug":"版本升级方式","link":"#版本升级方式","children":[]}]},{"level":2,"title":"分支回合","slug":"分支回合","link":"#分支回合","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1729437352000,"updatedTime":1733668804000,"contributors":[{"name":"lawsssscat","username":"lawsssscat","email":"18041500+LawssssCat@users.noreply.github.com","commits":4,"url":"https://github.com/lawsssscat"}]},"readingTime":{"minutes":15.39,"words":4618},"filePathRelative":"zh/dev-se-opensource/README.md","localizedDate":"2023年10月1日","excerpt":"<p>理解后可以尝试 “<a href=\\"https://linuxtoy.org/archives/free-software-licensing-quiz.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">自由软件许可证知识测验</a>”。</p>\\n<hr>\\n<h2>依赖识别</h2>\\n<p>无明确构建配置文件的项目，如 C/C++ 使用 Makefile 类的项目，则根据编译过程中具体执行的依赖行为进行判别。</p>\\n<p>存在构建配置文件的项目，如 Java 的 <code>pom.xml</code> 文件，通过对应的依赖管理器作为识别依据。</p>","autoDesc":true}');export{d as comp,h as data};
