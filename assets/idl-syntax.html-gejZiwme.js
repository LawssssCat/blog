import{_ as n,r as i,o as e,c as l,a as t,d as s,e as r,b as o,f as p}from"./app-CnfTRxO6.js";const d={},c=s("p",null,"Thrift 是一个典型的 CS（客户端/服务端） 结构，客户端和服务端可以使用不同的语言开发，通过 IDL（Interface Description Language） 作为中间语言来关联客户端和服务端的语言。",-1),k=s("p",null,"Thrift 采用 IDL（Interface Description Language） 来定义通用的服务接口，然后通过 Thrift 提供的编译器，将服务接口编译成不同语言编写的代码，通过这个方式来实现跨语言的功能。",-1),h=s("h2",{id:"语法",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#语法"},[s("span",null,"语法")])],-1),y=s("h3",{id:"数据类型-type",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#数据类型-type"},[s("span",null,"数据类型（type）")])],-1),B={href:"https://thrift.apache.org/docs/types.html",target:"_blank",rel:"noopener noreferrer"},E=p(`<table><thead><tr><th>type</th><th>desc</th><th>java</th><th>go</th></tr></thead><tbody><tr><td>i8</td><td>有符号，8 位整数</td><td>byte</td><td>int8</td></tr><tr><td>i16</td><td>有符号，16 位整数</td><td>float</td><td>int16</td></tr><tr><td>i32</td><td>有符号，32 位整数</td><td>int</td><td>int32</td></tr><tr><td>i64</td><td>有符号，64 位整数</td><td>long</td><td>int64</td></tr><tr><td>double</td><td>64 位浮点数</td><td>double</td><td>float64</td></tr><tr><td>bool</td><td>布尔值</td><td>boolean</td><td>bool</td></tr><tr><td>string</td><td>文本字符串（UTF-8）</td><td>java.lang.String</td><td>string</td></tr><tr><td>binary</td><td>未编码的字节序列</td><td>java.nio.ByteBuffer</td><td>[]byte</td></tr><tr><td>list&lt;T&gt;</td><td>有序列表，允许重复</td><td>java.util.List</td><td>[]T</td></tr><tr><td>set&lt;T&gt;</td><td>无序列表，不允许重复</td><td>java.util.Set</td><td>[]T</td></tr><tr><td>map&lt;K,V&gt;</td><td>字典</td><td>java.util.Map</td><td>map[K] V</td></tr></tbody></table><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">// 结构体</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">struct</span><span style="color:#24292E;--shiki-dark:#E06C75;"> Test</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#D19A66;">  1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="color:#D73A49;--shiki-dark:#C678DD;">map</span><span style="color:#D73A49;--shiki-dark:#56B6C2;">&lt;</span><span style="color:#D73A49;--shiki-dark:#C678DD;">string</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#24292E;--shiki-dark:#E06C75;">User</span><span style="color:#D73A49;--shiki-dark:#56B6C2;">&gt;</span><span style="color:#24292E;--shiki-dark:#E06C75;"> usermap</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#D19A66;">  2</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="color:#24292E;--shiki-dark:#E06C75;">set</span><span style="color:#D73A49;--shiki-dark:#56B6C2;">&lt;</span><span style="color:#24292E;--shiki-dark:#E06C75;">i32</span><span style="color:#D73A49;--shiki-dark:#56B6C2;">&gt;</span><span style="color:#24292E;--shiki-dark:#E06C75;"> intset</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#D19A66;">  3</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="color:#24292E;--shiki-dark:#E06C75;">list</span><span style="color:#D73A49;--shiki-dark:#56B6C2;">&lt;</span><span style="color:#24292E;--shiki-dark:#E06C75;">double</span><span style="color:#D73A49;--shiki-dark:#56B6C2;">&gt;</span><span style="color:#24292E;--shiki-dark:#E06C75;"> list</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="常量-const" tabindex="-1"><a class="header-anchor" href="#常量-const"><span>常量（const）</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">// 常量</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">const</span><span style="color:#24292E;--shiki-dark:#E06C75;"> i32</span><span style="color:#6F42C1;--shiki-dark:#E5C07B;"> MALE_INT</span><span style="color:#D73A49;--shiki-dark:#E5C07B;"> =</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">const</span><span style="color:#24292E;--shiki-dark:#E06C75;"> map</span><span style="color:#D73A49;--shiki-dark:#56B6C2;">&lt;</span><span style="color:#24292E;--shiki-dark:#E06C75;">i32</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#D73A49;--shiki-dark:#C678DD;">string</span><span style="color:#D73A49;--shiki-dark:#56B6C2;">&gt;</span><span style="color:#24292E;--shiki-dark:#E06C75;"> GENDER_MAP</span><span style="color:#D73A49;--shiki-dark:#E5C07B;"> =</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span><span style="color:#005CC5;--shiki-dark:#D19A66;">1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="color:#032F62;--shiki-dark:#98C379;">&quot;male&quot;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">2</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="color:#032F62;--shiki-dark:#98C379;">&quot;female&quot;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">// 别名</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">typedef</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> map</span><span style="color:#D73A49;--shiki-dark:#56B6C2;">&lt;</span><span style="color:#24292E;--shiki-dark:#E06C75;">i32</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#D73A49;--shiki-dark:#C678DD;">string</span><span style="color:#D73A49;--shiki-dark:#56B6C2;">&gt;</span><span style="color:#24292E;--shiki-dark:#E06C75;"> gmp</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="结构体-struct" tabindex="-1"><a class="header-anchor" href="#结构体-struct"><span>结构体（struct）</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">struct</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> &lt;</span><span style="color:#24292E;--shiki-dark:#E06C75;">结构体名称</span><span style="color:#D73A49;--shiki-dark:#56B6C2;">&gt;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#56B6C2;">  &lt;</span><span style="color:#24292E;--shiki-dark:#E06C75;">序号</span><span style="color:#D73A49;--shiki-dark:#56B6C2;">&gt;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">:[</span><span style="color:#24292E;--shiki-dark:#E06C75;">字段性质</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">] </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">&lt;</span><span style="color:#24292E;--shiki-dark:#E06C75;">字段类型</span><span style="color:#D73A49;--shiki-dark:#56B6C2;">&gt;</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> &lt;</span><span style="color:#24292E;--shiki-dark:#E06C75;">字段名称</span><span style="color:#D73A49;--shiki-dark:#56B6C2;">&gt;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> [</span><span style="color:#D73A49;--shiki-dark:#E5C07B;">=</span><span style="color:#D73A49;--shiki-dark:#56B6C2;">&lt;</span><span style="color:#24292E;--shiki-dark:#E06C75;">默认值</span><span style="color:#D73A49;--shiki-dark:#56B6C2;">&gt;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">] [;</span><span style="color:#D73A49;--shiki-dark:#56B6C2;">|</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">,]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">e</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E06C75;">g</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">struct</span><span style="color:#24292E;--shiki-dark:#E06C75;"> User</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#D19A66;">  1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="color:#24292E;--shiki-dark:#E06C75;">required</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> string</span><span style="color:#24292E;--shiki-dark:#E06C75;"> name</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">// required 必须填充，必须序列化</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#D19A66;">  2</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="color:#24292E;--shiki-dark:#E06C75;">optional</span><span style="color:#24292E;--shiki-dark:#E06C75;"> i32</span><span style="color:#24292E;--shiki-dark:#E06C75;"> age</span><span style="color:#D73A49;--shiki-dark:#E5C07B;"> =</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">// optional 不填充则不序列化</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#D19A66;">  3</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="color:#D73A49;--shiki-dark:#C678DD;">bool</span><span style="color:#24292E;--shiki-dark:#E06C75;"> gender</span><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;"> // 默认 optional</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">struct</span><span style="color:#24292E;--shiki-dark:#E06C75;"> bean</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#D19A66;">  1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="color:#24292E;--shiki-dark:#E06C75;">i32</span><span style="color:#24292E;--shiki-dark:#E06C75;"> number</span><span style="color:#D73A49;--shiki-dark:#E5C07B;"> =</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> 10</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#D19A66;">  2</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="color:#24292E;--shiki-dark:#E06C75;">i64</span><span style="color:#24292E;--shiki-dark:#E06C75;"> bigNumber</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#D19A66;">  3</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="color:#24292E;--shiki-dark:#E06C75;">double</span><span style="color:#24292E;--shiki-dark:#E06C75;"> decimals</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#D19A66;">  4</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="color:#D73A49;--shiki-dark:#C678DD;">string</span><span style="color:#24292E;--shiki-dark:#E06C75;"> name</span><span style="color:#D73A49;--shiki-dark:#E5C07B;"> =</span><span style="color:#032F62;--shiki-dark:#98C379;"> &quot;thrifty&quot;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="枚举-enum" tabindex="-1"><a class="header-anchor" href="#枚举-enum"><span>枚举（enum）</span></a></h3><p>Thrift 不支持枚举嵌套，且常量必须是 32 位正整数。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">enum</span><span style="color:#24292E;--shiki-dark:#E06C75;"> HttpStatus</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">  OK</span><span style="color:#D73A49;--shiki-dark:#E5C07B;"> =</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> 200</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">  NOTFOUND</span><span style="color:#D73A49;--shiki-dark:#E5C07B;"> =</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> 404</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="异常-exception" tabindex="-1"><a class="header-anchor" href="#异常-exception"><span>异常（exception）</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">exception</span><span style="color:#24292E;--shiki-dark:#E06C75;"> MyException</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#D19A66;">  1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="color:#24292E;--shiki-dark:#E06C75;">i32</span><span style="color:#24292E;--shiki-dark:#E06C75;"> errorCode</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#D19A66;">  2</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="color:#D73A49;--shiki-dark:#C678DD;">string</span><span style="color:#24292E;--shiki-dark:#E06C75;"> message</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">service</span><span style="color:#24292E;--shiki-dark:#E06C75;"> ExcampleService</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">  string</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> GetName</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">() </span><span style="color:#24292E;--shiki-dark:#E06C75;">throws</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="color:#005CC5;--shiki-dark:#D19A66;">1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="color:#24292E;--shiki-dark:#E06C75;">MyException</span><span style="color:#24292E;--shiki-dark:#E06C75;"> e</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="服务-service" tabindex="-1"><a class="header-anchor" href="#服务-service"><span>服务（service）</span></a></h3><p>服务的定义方法在语义上等同于面向对象语言中的接口。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">service</span><span style="color:#24292E;--shiki-dark:#E06C75;"> HelloService</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">  i32</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> sayInt</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="color:#24292E;--shiki-dark:#E06C75;">i32</span><span style="color:#24292E;--shiki-dark:#E06C75;"> param</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">  string</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> sayString</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">:</span><span style="color:#D73A49;--shiki-dark:#C678DD;">string</span><span style="color:#24292E;--shiki-dark:#E06C75;"> param</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">  bool</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> sayBoolean</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">:</span><span style="color:#D73A49;--shiki-dark:#C678DD;">bool</span><span style="color:#24292E;--shiki-dark:#E06C75;"> param</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">  void</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> sayvoid</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="命名空间-namespace" tabindex="-1"><a class="header-anchor" href="#命名空间-namespace"><span>命名空间（namespace）</span></a></h3><p>类似于 C++ 中的 namespace， java 中的 package， python 中的 module。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">namespace</span><span style="color:#24292E;--shiki-dark:#E06C75;"> java</span><span style="color:#24292E;--shiki-dark:#E06C75;"> com</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E06C75;">example</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E06C75;">test</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="包含-include" tabindex="-1"><a class="header-anchor" href="#包含-include"><span>包含（include）</span></a></h3><p>用于管理、重用和提高模块性/组织性。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">include</span><span style="color:#032F62;--shiki-dark:#98C379;"> &quot;test.thrift&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">struct</span><span style="color:#24292E;--shiki-dark:#E06C75;"> StSearchResult</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#D19A66;">  1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="color:#24292E;--shiki-dark:#E06C75;">int3</span><span style="color:#24292E;--shiki-dark:#E06C75;"> uid</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#ABB2BF;">  ...</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="注释-comment" tabindex="-1"><a class="header-anchor" href="#注释-comment"><span>注释（comment）</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;"> * This is a multi-line comment.</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">// single-line comment.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22);function u(m,C){const a=i("ExternalLinkIcon");return e(),l("div",null,[c,k,t(" more "),h,y,s("p",null,[s("a",B,[r("https://thrift.apache.org/docs/types.html"),o(a)])]),E])}const b=n(d,[["render",u],["__file","idl-syntax.html.vue"]]),g=JSON.parse('{"path":"/zh/dev-rpc-thrift/idl-syntax.html","title":"IDL 语法","lang":"zh-CN","frontmatter":{"title":"IDL 语法","date":"2024-04-05T00:00:00.000Z","tag":["thrift"],"order":2,"description":"Thrift 是一个典型的 CS（客户端/服务端） 结构，客户端和服务端可以使用不同的语言开发，通过 IDL（Interface Description Language） 作为中间语言来关联客户端和服务端的语言。 Thrift 采用 IDL（Interface Description Language） 来定义通用的服务接口，然后通过 Thrift ...","head":[["meta",{"property":"og:url","content":"https://lawsssscat.github.io/blog/zh/blog/zh/dev-rpc-thrift/idl-syntax.html"}],["meta",{"property":"og:site_name","content":"个人博客"}],["meta",{"property":"og:title","content":"IDL 语法"}],["meta",{"property":"og:description","content":"Thrift 是一个典型的 CS（客户端/服务端） 结构，客户端和服务端可以使用不同的语言开发，通过 IDL（Interface Description Language） 作为中间语言来关联客户端和服务端的语言。 Thrift 采用 IDL（Interface Description Language） 来定义通用的服务接口，然后通过 Thrift ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-14T05:17:52.000Z"}],["meta",{"property":"article:author","content":"Steven"}],["meta",{"property":"article:tag","content":"thrift"}],["meta",{"property":"article:published_time","content":"2024-04-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-14T05:17:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"IDL 语法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-05T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-14T05:17:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Steven\\",\\"url\\":\\"https://github.com/LawssssCat/\\"}]}"]]},"headers":[{"level":2,"title":"语法","slug":"语法","link":"#语法","children":[{"level":3,"title":"数据类型（type）","slug":"数据类型-type","link":"#数据类型-type","children":[]},{"level":3,"title":"常量（const）","slug":"常量-const","link":"#常量-const","children":[]},{"level":3,"title":"结构体（struct）","slug":"结构体-struct","link":"#结构体-struct","children":[]},{"level":3,"title":"枚举（enum）","slug":"枚举-enum","link":"#枚举-enum","children":[]},{"level":3,"title":"异常（exception）","slug":"异常-exception","link":"#异常-exception","children":[]},{"level":3,"title":"服务（service）","slug":"服务-service","link":"#服务-service","children":[]},{"level":3,"title":"命名空间（namespace）","slug":"命名空间-namespace","link":"#命名空间-namespace","children":[]},{"level":3,"title":"包含（include）","slug":"包含-include","link":"#包含-include","children":[]},{"level":3,"title":"注释（comment）","slug":"注释-comment","link":"#注释-comment","children":[]}]}],"git":{"createdTime":1712320147000,"updatedTime":1713071872000,"contributors":[{"name":"lawsssscat","email":"18041500+LawssssCat@users.noreply.github.com","commits":3}]},"readingTime":{"minutes":1.84,"words":551},"filePathRelative":"zh/dev-rpc-thrift/idl-syntax.md","localizedDate":"2024年4月5日","excerpt":"<p>Thrift 是一个典型的 CS（客户端/服务端） 结构，客户端和服务端可以使用不同的语言开发，通过 IDL（Interface Description Language） 作为中间语言来关联客户端和服务端的语言。</p>\\n<p>Thrift 采用 IDL（Interface Description Language） 来定义通用的服务接口，然后通过 Thrift 提供的编译器，将服务接口编译成不同语言编写的代码，通过这个方式来实现跨语言的功能。</p>\\n","autoDesc":true}');export{b as comp,g as data};
