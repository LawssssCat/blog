import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,d as n,o as r}from"./app-C0uzlWCK.js";const a={};function i(o,t){return r(),d("div",null,[...t[0]||(t[0]=[n('<p>RASP（Runtime application self-protection，运行时应用程序自我保护） 是一种内置或链接到应用程序环境中的安全技术，与应用程序融为一体，实时监测、阻断攻击，使程序自身拥有自我保护的能力。 RASP 可以增强 WAF 防护工具的安全能力，形成纵深防御的安全防护体系。</p><blockquote><p>2014 年 Gartner 安全报告里，RASP 被列为应用安全领域的关键趋势。</p></blockquote><p>那么，RASP 技术是如何应用、优势好处又有哪些呢？</p><table><thead><tr><th>能力</th><th>SAST（Static Application Security Testing，静态应用安全测试）</th><th>DAST（Dynamic Application Security Testing，动态应用安全测试）</th><th>IAST（Interactive Application Security Testing，交互式应用安全测试）</th><th>RASP（Runtime Application Securtiy Protected，运行时应用程序自我保护）</th></tr></thead><tbody><tr><td>描述</td><td>SAST 是在不运行代码的情况下对源代码或二进制代码进行安全扫描。它如同一位精通语法的校对大师，通过分析代码结构、逻辑和模式，揪出潜在的安全漏洞和不良编码实践。</td><td>DAST 是在应用程序运行时，模拟黑客攻击，从外部对系统进行黑盒测试。它就像一位身手敏捷的忍者，从网络层面发起各种攻击，检测应用在实际运行中的安全防御能力。</td><td>IAST 是结合了 SAST 和 DAST 的优点，通过在应用程序内部植入探针，在运行时动态地监测和报告安全漏洞。它就像是内嵌的间谍，一边让应用正常运行，一边悄无声息地收集安全情报。</td><td>RASP 是一种应用程序保护技术，它在应用程序运行时监视和保护应用程序免受攻击。RASP 使用运行时上下文信息和安全策略来检测和防止攻击，并且可以主动响应和阻止潜在的安全威胁。RASP 可以检测和防御多种攻击向量，包括应用程序层面的漏洞、网络攻击和恶意代码注入等。</td></tr><tr><td>领域</td><td>白盒</td><td>灰盒</td><td>黑盒</td><td></td></tr><tr><td>对象</td><td>代码</td><td>运行中的APP</td><td>模拟黑客攻击</td><td></td></tr><tr><td>集成阶段</td><td>开发</td><td>测试</td><td>上线</td><td></td></tr><tr><td>误报率</td><td></td><td></td><td></td><td></td></tr><tr><td>入侵性</td><td></td><td></td><td></td><td></td></tr><tr><td>产品</td><td>商业: Fortify, Checkmarx <br> 开源: Soar, Raptor, RIPS, Seay源码审计系统, VCG, 等</td><td>商业: AppScan, AWVS, webinpsect <br> 开源: Owasp ZAP, Xray </td><td>商业: Contrast Security, 等 <br> 开源: Xxx RASP </td><td>商业: <br> 开源: [btrace](https://github.com/btraceio/btrace)</td></tr></tbody></table><p>todo <a href="https://tech.meituan.com/2024/01/19/runtime-application-self-protection-practice-in-meituan.html" target="_blank" rel="noopener noreferrer">美团 RASP 大规模研发部署实践总结</a></p>',5)])])}const s=e(a,[["render",i]]),S=JSON.parse('{"path":"/zh/dev-java-security/rasp.html","title":"RASP","lang":"zh-CN","frontmatter":{"title":"RASP","date":"2024-12-16T00:00:00.000Z","order":66,"description":"RASP（Runtime application self-protection，运行时应用程序自我保护） 是一种内置或链接到应用程序环境中的安全技术，与应用程序融为一体，实时监测、阻断攻击，使程序自身拥有自我保护的能力。 RASP 可以增强 WAF 防护工具的安全能力，形成纵深防御的安全防护体系。 2014 年 Gartner 安全报告里，RASP ...","head":[["meta",{"property":"og:url","content":"https://lawsssscat.github.io/blog/zh/blog/zh/dev-java-security/rasp.html"}],["meta",{"property":"og:site_name","content":"个人博客"}],["meta",{"property":"og:title","content":"RASP"}],["meta",{"property":"og:description","content":"RASP（Runtime application self-protection，运行时应用程序自我保护） 是一种内置或链接到应用程序环境中的安全技术，与应用程序融为一体，实时监测、阻断攻击，使程序自身拥有自我保护的能力。 RASP 可以增强 WAF 防护工具的安全能力，形成纵深防御的安全防护体系。 2014 年 Gartner 安全报告里，RASP ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-26T22:55:11.000Z"}],["meta",{"property":"article:published_time","content":"2024-12-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-26T22:55:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"RASP\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-12-16T00:00:00.000Z\\",\\"dateModified\\":\\"2024-12-26T22:55:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Steven\\",\\"url\\":\\"https://github.com/LawssssCat/\\"}]}"]]},"headers":[],"git":{"createdTime":1735253711000,"updatedTime":1735253711000,"contributors":[{"name":"lawsssscat","username":"lawsssscat","email":"18041500+LawssssCat@users.noreply.github.com","commits":1,"url":"https://github.com/lawsssscat"}]},"readingTime":{"minutes":2.48,"words":743},"filePathRelative":"zh/dev-java-security/rasp.md","localizedDate":"2024年12月16日","excerpt":"<p>RASP（Runtime application self-protection，运行时应用程序自我保护） 是一种内置或链接到应用程序环境中的安全技术，与应用程序融为一体，实时监测、阻断攻击，使程序自身拥有自我保护的能力。\\nRASP 可以增强 WAF 防护工具的安全能力，形成纵深防御的安全防护体系。</p>\\n<blockquote>\\n<p>2014 年 Gartner 安全报告里，RASP 被列为应用安全领域的关键趋势。</p>\\n</blockquote>\\n<p>那么，RASP 技术是如何应用、优势好处又有哪些呢？</p>\\n<table>\\n<thead>\\n<tr>\\n<th>能力</th>\\n<th>SAST（Static Application Security Testing，静态应用安全测试）</th>\\n<th>DAST（Dynamic Application Security Testing，动态应用安全测试）</th>\\n<th>IAST（Interactive Application Security Testing，交互式应用安全测试）</th>\\n<th>RASP（Runtime Application Securtiy Protected，运行时应用程序自我保护）</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>描述</td>\\n<td>SAST 是在不运行代码的情况下对源代码或二进制代码进行安全扫描。它如同一位精通语法的校对大师，通过分析代码结构、逻辑和模式，揪出潜在的安全漏洞和不良编码实践。</td>\\n<td>DAST 是在应用程序运行时，模拟黑客攻击，从外部对系统进行黑盒测试。它就像一位身手敏捷的忍者，从网络层面发起各种攻击，检测应用在实际运行中的安全防御能力。</td>\\n<td>IAST 是结合了 SAST 和 DAST 的优点，通过在应用程序内部植入探针，在运行时动态地监测和报告安全漏洞。它就像是内嵌的间谍，一边让应用正常运行，一边悄无声息地收集安全情报。</td>\\n<td>RASP 是一种应用程序保护技术，它在应用程序运行时监视和保护应用程序免受攻击。RASP 使用运行时上下文信息和安全策略来检测和防止攻击，并且可以主动响应和阻止潜在的安全威胁。RASP 可以检测和防御多种攻击向量，包括应用程序层面的漏洞、网络攻击和恶意代码注入等。</td>\\n</tr>\\n<tr>\\n<td>领域</td>\\n<td>白盒</td>\\n<td>灰盒</td>\\n<td>黑盒</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>对象</td>\\n<td>代码</td>\\n<td>运行中的APP</td>\\n<td>模拟黑客攻击</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>集成阶段</td>\\n<td>开发</td>\\n<td>测试</td>\\n<td>上线</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>误报率</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>入侵性</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>产品</td>\\n<td>商业: Fortify, Checkmarx <br> 开源: Soar, Raptor, RIPS, Seay源码审计系统, VCG, 等</td>\\n<td>商业: AppScan, AWVS, webinpsect <br> 开源: Owasp ZAP, Xray </td>\\n<td>商业: Contrast Security, 等  <br> 开源: Xxx RASP </td>\\n<td>商业: <br> 开源: [btrace](https://github.com/btraceio/btrace)</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{s as comp,S as data};
