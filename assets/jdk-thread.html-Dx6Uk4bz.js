import{_ as o,r as t,o as p,c,b as d,w as n,f as e,e as a,d as s}from"./app-BJ2MtmFB.js";const k={},h=e(`<h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h2><h3 id="juc" tabindex="-1"><a class="header-anchor" href="#juc"><span>JUC</span></a></h3><p>JUC <code>java.util.concurrent</code> 缩写</p><p>并发场景进行多线程编程的工具类</p><h3 id="进程、线程、协程" tabindex="-1"><a class="header-anchor" href="#进程、线程、协程"><span>进程、线程、协程</span></a></h3><p><strong>进程</strong> —— 一个应用，系统资源分配单位</p><p><strong>线程</strong> —— 一个应用的其中一个任务，共享进程资源</p><p><strong>协程</strong>/<strong>虚拟线程（Visual Thread）</strong> —— 在一个任务中，实现多任务有序的协作开展任务</p><ul><li>一个线程中可以有多个虚拟线程</li><li>不由系统管理，由 jvm 管理</li><li>由于由 jvm 管理，完全在内存中进行状态切换，所以创建和销毁的开销小，更高效</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>可以形象的理解： 进程=饭馆；线程=饭桌；协程=座椅；</p></div><h3 id="并发、并行、串行" tabindex="-1"><a class="header-anchor" href="#并发、并行、串行"><span>并发、并行、串行</span></a></h3><p>并行 = 多个线程<strong>同时</strong>执行<strong>完整</strong>任务</p><p>串行 = 多个线程<strong>依次</strong>执行<strong>完整</strong>任务</p><p>并发 = 多个线程<strong>轮流</strong>执行<strong>部分</strong>任务</p><h3 id="线程数、cpu-的核心数" tabindex="-1"><a class="header-anchor" href="#线程数、cpu-的核心数"><span>线程数、CPU 的核心数</span></a></h3><p>线程是 CPU 调度的最小单位 —— 即同一时刻，一个 CPU 核心数量运行一个线程</p><h4 id="逻辑处理器-intel-超线程技术" tabindex="-1"><a class="header-anchor" href="#逻辑处理器-intel-超线程技术"><span>逻辑处理器（Intel 超线程技术）</span></a></h4><p>Intel 引入超线程技术后，产生了 “逻辑处理器” 的概念，即使 CPU 核心数与线程数可以形成 1:2 的关系。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在 Java 中使用 <code>Runtime.getRuntime().availableProcessors()</code> 可以获取当前的 CPU 核心数。 ❗ 实际上是逻辑处理器核心数</p></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>更多的线程一般意味着更多线程创建/销毁开销、更频繁的上下文切换，所以一般需要根据现有的 CPU 核心数量/逻辑处理器核心数量估算最大可并发的线程数。</p></div><h3 id="时间片、上下文切换" tabindex="-1"><a class="header-anchor" href="#时间片、上下文切换"><span>时间片、上下文切换</span></a></h3><p><strong>时间片</strong>： 为了让一个 CPU 核心并发执行多个线程，操作系统设计了 “时间片” 机制，即 CPU 核心轮流执行不同线程小段时间，让多个任务的状态在一个大时间内总能保持更新。</p><p><strong>上下文切换</strong>： 两个连续的时间片可能给到同一个线程，也可能给到不同的线程。当两个连续的时间片给到不同的线程后，CPU 核心执行到对应时间片时，由于执行的是另外的线程任务，就需要进行线程上下文的切换。</p><h2 id="thread-api" tabindex="-1"><a class="header-anchor" href="#thread-api"><span>Thread API</span></a></h2><p>start / run</p><p>setName / getName</p><p>sleep （💡 不释放锁）（推荐：TimeUnit） / interrupt / isInterrupted / interrupted</p><p>yield （💡 不释放锁） —— 允许相同优先级其他线程抢占时间片。</p><p>setPriority / getPriority —— 优先级</p><p>join / isAlive —— 等待线程执行完成</p><p>setDaemon —— 守护线程</p><p>setUncaughtExceptionHandler —— 处理未捕获的异常</p><h3 id="线程中断-interrupt" tabindex="-1"><a class="header-anchor" href="#线程中断-interrupt"><span>线程中断（interrupt）</span></a></h3><p>Java Thread 有如下打断线程相关方法</p><p><code>public void interrupt()</code> 打断线程，线程抛出中断异常 （❗ 仅打上中断标记，不保证中断立即执行）</p><p><code>public boolean isInterrupted()</code> 判断当前线程是否被打断，不清除打断标记</p><p><code>public static boolean interrupted()</code> 判断当前线程是否被打断，清除打断标记</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">Thread</span><span style="color:#24292E;--shiki-dark:#E06C75;"> thread </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> Thread</span><span style="color:#24292E;--shiki-dark:#E06C75;">(() </span><span style="color:#D73A49;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#24292E;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">  while</span><span style="color:#24292E;--shiki-dark:#E06C75;">(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">true</span><span style="color:#24292E;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">    System</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E5C07B;">out</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#24292E;--shiki-dark:#E5C07B;">Thread</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E5C07B;">currentThread</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">isInterrupted</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">());</span><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;"> // true</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="color:#24292E;--shiki-dark:#E06C75;"> (</span><span style="color:#24292E;--shiki-dark:#E5C07B;">Thread</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">interrupted</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">()</span><span style="color:#24292E;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">      System</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E5C07B;">out</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#24292E;--shiki-dark:#E5C07B;">Thread</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E5C07B;">currentThread</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">isInterrupted</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">());</span><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;"> // false</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">      break</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;"> // 线程中断标记，不会主动中断线程，需要手动结束线程任务</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">    System</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E5C07B;">out</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#032F62;--shiki-dark:#98C379;">&quot;定时任务...&quot;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">})</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">thread</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">start</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">thread</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">interrupt</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">();</span><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;"> // 打上线程中断标记</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>Thread.sleep()</code> 中会调用 <code>Thread.interrupted()</code> 判断并消除中断标记</p></div><h3 id="线程状态" tabindex="-1"><a class="header-anchor" href="#线程状态"><span>线程状态</span></a></h3><p>参考： https://www.cnblogs.com/i-code/p/13839020.html</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>理解线程状态为了啥？ todo</p></div><p>在 JAVA 环境中，线程 Thread 有如下几个状态： （💡 通过 <code>Thread.State</code> 查看枚举） （💡 通过 <code>thread.getState()</code> 查看线程状态）</p><figure><img src="https://s2.loli.net/2024/05/26/vlUnRbkdoXBuTNE.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h3 id="callable、future" tabindex="-1"><a class="header-anchor" href="#callable、future"><span>Callable、Future</span></a></h3><p>获取线程返回值</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">FutureTask</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#D73A49;--shiki-dark:#E5C07B;">Integer</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">&gt;</span><span style="color:#24292E;--shiki-dark:#E06C75;"> future </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> FutureTask</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="color:#24292E;--shiki-dark:#E06C75;">(</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">  (</span><span style="color:#24292E;--shiki-dark:#E5C07B;">Callable</span><span style="color:#D73A49;--shiki-dark:#56B6C2;">&lt;</span><span style="color:#24292E;--shiki-dark:#E06C75;">Integer</span><span style="color:#D73A49;--shiki-dark:#56B6C2;">&gt;</span><span style="color:#24292E;--shiki-dark:#E06C75;">) () </span><span style="color:#D73A49;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#24292E;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> 5</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">)</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">new</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> Thread</span><span style="color:#24292E;--shiki-dark:#E06C75;">(future)</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">start</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">try</span><span style="color:#24292E;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">  Integer</span><span style="color:#24292E;--shiki-dark:#E06C75;"> value </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> future</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">get</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">  // ...</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="異常抛出时机" tabindex="-1"><a class="header-anchor" href="#異常抛出时机"><span>異常抛出时机</span></a></h3><ul><li><p>无返回值用 execute 方法调用，异常马上在子线程抛出</p></li><li><p>有返回值用 submit 方法调用得到 future 类，异常在 <code>future.get</code> 时在主线程抛出</p></li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>异常抛出后，先给由 setUncaughtExceptionHandler 方法绑定的处理器处理</p></div><h2 id="threadpool-api" tabindex="-1"><a class="header-anchor" href="#threadpool-api"><span>ThreadPool API</span></a></h2><p>Java 里的线程池顶级接口是 <code>java.util.concurrent.Executor</code> 一个执行线程的工具和 <code>java.util.concurrent.ExecutorService</code> 一个线程管理服务。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">ExecutorService</span><span style="color:#24292E;--shiki-dark:#E06C75;"> threadPool </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> ThreadPoolExecutor</span><span style="color:#24292E;--shiki-dark:#E06C75;">(</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#D19A66;">  10</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;"> // 💡 corePoolSize 核心线程数量 —— 创建，不回收</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#D19A66;">  20</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;"> // 💡 maximumPoolSize 最大线程数量 —— 创建，回收</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#D19A66;">  0L</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;"> // 💡 keepAliveTime 非核心线程存活时间</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">  TimeUnit</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E5C07B;">SECONDS</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">  // 💡 workQueue 工作队列/阻塞队列 —— 超过核心线程数量后排队，队列满后才创建非核心线程处理任务</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">  // e.g.</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">  new</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> ArrayBlockingQueue</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#D73A49;--shiki-dark:#E5C07B;">Runnable</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">&gt;</span><span style="color:#24292E;--shiki-dark:#E06C75;">(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">3</span><span style="color:#24292E;--shiki-dark:#E06C75;">)</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;"> // 基于数组的有界队列，先入先出（FIFO）原则排序</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">  // new LinkedBlockingQueue // 基于链表的有界阻塞队列（不设置大小时，默认为 Integer.MAX_VALUE），先入先出（FIFO）原则排序</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">  Executors</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">defaultThreadFactory</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(),</span><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;"> // 💡 threadFactory 线程工厂 —— 可以用来绑定线程的异常处理器</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">  // 💡 handler 拒绝策略 —— 阻塞队列满了、最大线程数也满了，则有拒绝策略处理</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">  // e.g.</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">  // new ThreadPoolExecutor.AbortPolicy() // 丢弃任务并抛出 RejectedExecutionException 异常 ❗可能造成调用者线程终止</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">  new</span><span style="color:#24292E;--shiki-dark:#E06C75;"> ThreadPoolExecutor</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">DiscardPolicy</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">()</span><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;"> // 丢弃任务不抛出异常</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">  // new ThreadPoolExecutor.DiscardOldestPolicy() // 丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">  // new ThreadPoolExecutor.CallerRunsPolicy() // 由调用线程处理该任务，e.g. 由 main 线程调用 runnable.run 方法</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">)</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">try</span><span style="color:#24292E;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">  for</span><span style="color:#24292E;--shiki-dark:#E06C75;"> (</span><span style="color:#D73A49;--shiki-dark:#C678DD;">int</span><span style="color:#24292E;--shiki-dark:#E06C75;"> i</span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#005CC5;--shiki-dark:#D19A66;">1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span><span style="color:#24292E;--shiki-dark:#E06C75;"> i</span><span style="color:#D73A49;--shiki-dark:#56B6C2;">&lt;=</span><span style="color:#005CC5;--shiki-dark:#D19A66;">10</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span><span style="color:#24292E;--shiki-dark:#E06C75;"> i</span><span style="color:#D73A49;--shiki-dark:#ABB2BF;">++</span><span style="color:#24292E;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">    // 💡无返回值使用 execute；有返回值使用 submit</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">    threadPool</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">execute</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(() </span><span style="color:#D73A49;--shiki-dark:#C678DD;">-&gt;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">      // ...</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">} </span><span style="color:#D73A49;--shiki-dark:#C678DD;">finally</span><span style="color:#24292E;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">  // threadPool.shutdownNow(); // （中断所有线程，）立即关闭线程池</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">  threadPool</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">shutdown</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">();</span><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;"> // （中断所有线程，）等待线程池中所有任务（正在执行的任务，队列中的任务）执行完毕后，关闭线程池</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">  threadPool</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">awaitTermination</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#24292E;--shiki-dark:#E5C07B;">Long</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E5C07B;">MAX_VALUE</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#24292E;--shiki-dark:#E5C07B;">TimeUnit</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E5C07B;">SECONDS</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;"> // 等待线程池关闭，即线程池中所有线程执行完毕</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">  threadPool</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">isTerminated</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">();</span><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;"> // 判断线程正真结束。true = 线程池中的所有线程执行完毕</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="executors" tabindex="-1"><a class="header-anchor" href="#executors"><span>Executors</span></a></h3><p>线程池有很多配置，为了简化配置，官方推荐使用 <code>java.util.concurrent.Exectors</code> 中的静态工厂类来生成一些常用的线程池。</p><ul><li>newFixedThreadPool —— 固定容量线程池</li><li>newCachedThreadPool —— 可缓存线程池。当需求较小，回收空闲线程；当需求过量，增加线程数（无上限）</li><li>newSingleThreadPoolExecutor —— 单线程 Executor</li><li>newScheduledThreadPool —— 固定容量线程池，且可延时启动任务和定时任务启动</li></ul><h3 id="非核心线程淘汰机制" tabindex="-1"><a class="header-anchor" href="#非核心线程淘汰机制"><span>非核心线程淘汰机制</span></a></h3><p>参考： https://www.bilibili.com/video/BV177421Z7as?p=29</p><p>todo 理解 <code>ThreadPoolExecutor.getTask</code> 逻辑</p><ul><li>time、timeout 作用</li><li>cas 竞争淘汰</li></ul><h2 id="线程安全" tabindex="-1"><a class="header-anchor" href="#线程安全"><span>线程安全</span></a></h2><p>线程安全 = 共享数据符合预期</p><ul><li>原子性 —— atomic</li><li>可见性 —— violated</li><li>有序性 —— 指令重排、内存屏障、synchronized</li></ul><h3 id="jmm-内存模型" tabindex="-1"><a class="header-anchor" href="#jmm-内存模型"><span>JMM 内存模型</span></a></h3><p>todo 可见性 violated、指令重排 内存屏障</p><h3 id="threadlocal" tabindex="-1"><a class="header-anchor" href="#threadlocal"><span>ThreadLocal</span></a></h3><p>todo</p><h4 id="问题-线程池中内存泄漏" tabindex="-1"><a class="header-anchor" href="#问题-线程池中内存泄漏"><span>问题：线程池中内存泄漏</span></a></h4><p>如果在线程池中使用 ThreadLocal 可能会造成内存泄漏。</p><p>可能造成内存泄漏的推论：</p><ol><li>线程对象是通过强引入指向 ThreadLocalMap 的</li><li>ThreadLocalMap 也是强引用指向内部的 Entry</li><li>内部的 Entry key 和 value 值分别是 “<code>Runnable</code> 中的 <code>new ThreadLocal</code> <code>ThreadLocal#xxxx</code>” 和 “<code>Runnable.run</code> 存入的值”</li><li>当 <code>Runnable.run</code> 结束后，<code>ThreadLocal#xxxx</code> 依然被 Entry 强引用，但以无其他方式获取它</li><li>因为线程池该线程可能长时间存在，从而导致 Entry 这块内存无法被 gc 回收，导致内存泄漏</li></ol><p>解决方法：</p><p>在线程池中，使用了 ThreadLocal 对象后，手动调用 ThreadLocal 的 remove 方法，手动清除 Entry 对象。</p><h4 id="inheritablethreadlocal" tabindex="-1"><a class="header-anchor" href="#inheritablethreadlocal"><span>InheritableThreadLocal</span></a></h4><p>解决 ThreadLocal 无法获取父线程中的 ThreadLocal 的值的问题</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">InheritableThreadLocal</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#D73A49;--shiki-dark:#E5C07B;">String</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">&gt;</span><span style="color:#24292E;--shiki-dark:#E06C75;"> threadLocal </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> InheritableThreadLocal</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="color:#24292E;--shiki-dark:#E06C75;">()</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">threadLocal</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">set</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#032F62;--shiki-dark:#98C379;">&quot;test&quot;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">Thread</span><span style="color:#24292E;--shiki-dark:#E06C75;"> thread </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> Thread</span><span style="color:#24292E;--shiki-dark:#E06C75;">(</span><span style="color:#D73A49;--shiki-dark:#C678DD;">new</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> Runnable</span><span style="color:#24292E;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">  @</span><span style="color:#D73A49;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">  public</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> run</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">()</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">    String</span><span style="color:#24292E;--shiki-dark:#E06C75;"> value</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> threadLocal</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">get</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">    // ...</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">})</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">thread</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">start</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">Thread</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">sleep</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">1000</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>无法感知到父线程中途修改 ThreadLocal 的值</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">InheritableThreadLocal</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#D73A49;--shiki-dark:#E5C07B;">String</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">&gt;</span><span style="color:#24292E;--shiki-dark:#E06C75;"> threadLocal </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> InheritableThreadLocal</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="color:#24292E;--shiki-dark:#E06C75;">()</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">threadLocal</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">set</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#032F62;--shiki-dark:#98C379;">&quot;test&quot;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">for</span><span style="color:#24292E;--shiki-dark:#E06C75;"> (</span><span style="color:#D73A49;--shiki-dark:#C678DD;">int</span><span style="color:#24292E;--shiki-dark:#E06C75;"> i</span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#005CC5;--shiki-dark:#D19A66;">0</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span><span style="color:#24292E;--shiki-dark:#E06C75;"> i</span><span style="color:#D73A49;--shiki-dark:#56B6C2;">&lt;</span><span style="color:#005CC5;--shiki-dark:#D19A66;">10</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span><span style="color:#24292E;--shiki-dark:#E06C75;"> i</span><span style="color:#D73A49;--shiki-dark:#ABB2BF;">++</span><span style="color:#24292E;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">  if</span><span style="color:#24292E;--shiki-dark:#E06C75;"> (i</span><span style="color:#D73A49;--shiki-dark:#56B6C2;">==</span><span style="color:#005CC5;--shiki-dark:#D19A66;">5</span><span style="color:#24292E;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">    threadLocal</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">set</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#032F62;--shiki-dark:#98C379;">&quot;test5&quot;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">  Thread</span><span style="color:#24292E;--shiki-dark:#E06C75;"> thread </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> Thread</span><span style="color:#24292E;--shiki-dark:#E06C75;">(</span><span style="color:#D73A49;--shiki-dark:#C678DD;">new</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> Runnable</span><span style="color:#24292E;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    @</span><span style="color:#D73A49;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> run</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">()</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">      String</span><span style="color:#24292E;--shiki-dark:#E06C75;"> value</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> threadLocal</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">get</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(); </span><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">// 依然是 test</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">      // ...</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了解决这个问题，可以使用阿里开源组件 TransmittableThreadLocal</p></div><h3 id="原子类-atomic" tabindex="-1"><a class="header-anchor" href="#原子类-atomic"><span>原子类（atomic）</span></a></h3><p>在 <code>java.util.concurrent.atomic</code> 包中</p><table><thead><tr><th>类型</th><th>具体类</th></tr></thead><tbody><tr><td>基本类型</td><td>AtomicInteger、AtomicLong、AtomicBoolean</td></tr><tr><td>引用类型</td><td>AtomicReference、AtomicStampedReference、AtomicMarkableReference （涉及 CAS）</td></tr><tr><td>数组类型</td><td>AtomicIntegerArray、AtomicLongArray、AtomicReferenceArray</td></tr><tr><td>升级类型</td><td>AtomicIntegerFieldUpdater、AtomicLongFieldUpdater、AtomicReferenceFieldUpdater</td></tr><tr><td>累加器 Adder</td><td>LongAdder、DoubleAdder</td></tr><tr><td>积累器 Accumulator <br> 可自定义累加方式</td><td>LongAccumulator、DoubleAccumulator</td></tr></tbody></table><div class="hint-container tip"><p class="hint-container-title">提示</p><p>lazySet 不会保证可见性（没有加内存屏障）</p></div><h3 id="aba-问题" tabindex="-1"><a class="header-anchor" href="#aba-问题"><span>ABA 问题</span></a></h3><p>并发场景下，存在上下文数值被其他线程篡改的情况。</p><p>这种情况通过 “原子类 + 版本号” 的方式识别。</p><p>todo 例子 AtomicStampedReference</p><h3 id="锁" tabindex="-1"><a class="header-anchor" href="#锁"><span>锁</span></a></h3><h4 id="悲观锁-互斥锁-阻塞锁" tabindex="-1"><a class="header-anchor" href="#悲观锁-互斥锁-阻塞锁"><span>悲观锁/互斥锁/阻塞锁</span></a></h4><p>悲观锁 —— 获取锁/释放锁均有 “线程状态的切换”，这会消耗性能</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>所谓 “线程状态切换” 即： 让没有得到锁资源的线程进入 BLOCK 状态，然后在争夺到锁资源后恢复为 RUNNABLE 状态。 这个过程涉及到操作系统用户模式和内核模式的转换，所以代价比较高。</p></div><h5 id="synchronized-关键字" tabindex="-1"><a class="header-anchor" href="#synchronized-关键字"><span>synchronized 关键字</span></a></h5><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">public</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> synchronized</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> test</span><span style="color:#24292E;--shiki-dark:#E06C75;">() throws InterruptedException { </span><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">// 💡线程状态切换</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#E5C07B;">  this</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">wait</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#E5C07B;">  this</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">notify</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">()</span><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;"> // 不能指定线程唤醒</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="reentrantlock-类" tabindex="-1"><a class="header-anchor" href="#reentrantlock-类"><span>ReentrantLock 类</span></a></h5><p><code>ReentrantLock lock = new ReentrantLock()</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">ReentrantLock</span><span style="color:#24292E;--shiki-dark:#E06C75;"> lock </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> ReentrantLock</span><span style="color:#24292E;--shiki-dark:#E06C75;">()</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">lock</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">lock</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">()</span><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;"> // 💡线程状态切换</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">con</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">wait</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">con</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">signal</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">lock</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">unlock</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="乐观锁-非阻塞锁" tabindex="-1"><a class="header-anchor" href="#乐观锁-非阻塞锁"><span>乐观锁/非阻塞锁</span></a></h4><p>乐观锁 —— 通过系统指令，保证修改某变量状态时是原子性的，从而通过判断该变量状态，判断是否进入锁</p><h5 id="自旋锁-spinlock-cas-compare-and-swap" tabindex="-1"><a class="header-anchor" href="#自旋锁-spinlock-cas-compare-and-swap"><span>自旋锁（spinlock）/CAS（Compare and Swap）</span></a></h5><p>自旋锁是在当前线程上，不停地循环判断原子变量的状态，判断是否进入锁。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>自旋锁通过循环将线程卡在某段代码上，从而避免线程状态的改变为 BLOCK，所以响应速度更快。 但当线程数不停增加时，因为每个线程都需要执行，占用 CPU 时间，所以性能会下降明显。 所以只有当线程竞争不激烈，并且保持锁的时间短时，适合使用自旋锁。</p></div><p>e.g.</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">for</span><span style="color:#24292E;--shiki-dark:#E06C75;">(</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;;</span><span style="color:#24292E;--shiki-dark:#E06C75;">) { </span><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">// 自旋</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">  // 使用操作系统指令保证 compare and set 这两步操作的原子性</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">  if</span><span style="color:#24292E;--shiki-dark:#E06C75;"> (</span><span style="color:#24292E;--shiki-dark:#E5C07B;">Unsafe</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">getUnsafe</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">().</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">compareAndSwapInt</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">()</span><span style="color:#24292E;--shiki-dark:#E06C75;">) { </span><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">// 只有一个线程能进入</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">    // ...</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    return</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>or</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">// 使用了CAS原子操作，lock函数将owner设置为当前线程，并且预测原来的值为空。unlock函数将owner设置为null，并且预测值为当前线程</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">public</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="color:#6F42C1;--shiki-dark:#E5C07B;"> SpinLock</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">  private</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> AtomicReference</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#D73A49;--shiki-dark:#E5C07B;">Thread</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">&gt;</span><span style="color:#24292E;--shiki-dark:#E06C75;"> sign </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> AtomicReference</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="color:#24292E;--shiki-dark:#E06C75;">()</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">  public</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> lock</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">()</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">    Thread</span><span style="color:#24292E;--shiki-dark:#E06C75;"> current</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> Thread</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">currentThread</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    while</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="color:#D73A49;--shiki-dark:#56B6C2;">!</span><span style="color:#24292E;--shiki-dark:#E5C07B;">sign</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">compareAndSet</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">null</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, current)) {}</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">  public</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> unlock</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">()</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">    Thread</span><span style="color:#24292E;--shiki-dark:#E06C75;"> current</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> Thread</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">currentThread</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">    sign</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">compareAndSet</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(current, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">null</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="偏向锁、轻量级锁、重量级锁" tabindex="-1"><a class="header-anchor" href="#偏向锁、轻量级锁、重量级锁"><span>偏向锁、轻量级锁、重量级锁</span></a></h4><h5 id="synchronized-锁升级问题" tabindex="-1"><a class="header-anchor" href="#synchronized-锁升级问题"><span>synchronized 锁升级问题</span></a></h5><p>在 JDK 1.6 之前，JVM 通过内核态的 <strong>管程（Monitor，监视器，对象锁）</strong> 来实现 synchronized 锁的互斥。这种锁属于重量级锁，响应效率低。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>管程（Monitor，监视器）是指管理共享变量操作的过程，让它们支持并发时的线程安全。（简单来说就是两个作用：同步和互斥） Java 中的 <code>synchronized</code>、<code>wait()</code>、<code>notify()</code>、<code>notifyAll()</code> 均是管程技术的一部分。</p><p>💡 源码： Hotspot jdk 1.6 c++</p></div><p>在 JDK 1.6 之后，JVM 为了提高锁的获取与释放效率，对 synchronized 的实现进行优化，引入了 “<strong>偏向锁</strong>” 和 “<strong>轻量级锁</strong>”。 （此时，锁有四种级别，级别从低到高依次为：<strong>无锁</strong>、<strong>偏向锁</strong>、<strong>轻量级锁</strong>、<strong>重量级锁</strong>） 随着锁竞争加剧，锁级别会逐渐升级。 （锁升级过程不可逆，即：锁级别只升不降）</p><p>todo markWord pol</p><p>todo 四个级别</p><h4 id="可重入锁-reentrant-递归锁" tabindex="-1"><a class="header-anchor" href="#可重入锁-reentrant-递归锁"><span>可重入锁（reentrant）/递归锁</span></a></h4><p>可重入锁，也叫做递归锁，指的是同一线程 外层函数获得锁之后 ，内层递归函数仍然有获取该锁的代码，但不受影响。 在 JDK 中 <code>ReentrantLock</code> 和 <code>synchronized</code> 都是可重入锁。</p>`,112),y=s("div",{class:"language-java line-numbers-mode","data-ext":"java","data-title":"java"},[s("pre",{class:"shiki shiki-themes github-light one-dark-pro",style:{"background-color":"#fff","--shiki-dark-bg":"#282c34",color:"#24292e","--shiki-dark":"#abb2bf"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}},"public"),s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}}," class"),s("span",{style:{color:"#6F42C1","--shiki-dark":"#E5C07B"}}," Test"),s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}}," implements"),s("span",{style:{color:"#6F42C1","--shiki-dark":"#E5C07B"}}," Runnable"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#E5C07B"}},"  ReentrantLock"),s("span",{style:{color:"#24292E","--shiki-dark":"#E06C75"}}," lock "),s("span",{style:{color:"#D73A49","--shiki-dark":"#56B6C2"}},"="),s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}}," new"),s("span",{style:{color:"#6F42C1","--shiki-dark":"#61AFEF"}}," ReentrantLock"),s("span",{style:{color:"#24292E","--shiki-dark":"#E06C75"}},"()"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},";")]),a(`
`),s("span",{class:"line"}),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}},"  public"),s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}}," void"),s("span",{style:{color:"#6F42C1","--shiki-dark":"#61AFEF"}}," get"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"()"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#E5C07B"}},"    lock"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"."),s("span",{style:{color:"#6F42C1","--shiki-dark":"#61AFEF"}},"lock"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"();")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A737D","--shiki-dark":"#7F848E","font-style":"inherit","--shiki-dark-font-style":"italic"}},"    // ...")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6F42C1","--shiki-dark":"#61AFEF"}},"    set"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"();")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#E5C07B"}},"    lock"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"."),s("span",{style:{color:"#6F42C1","--shiki-dark":"#61AFEF"}},"unlock"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"();")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"  }")]),a(`
`),s("span",{class:"line"}),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}},"  public"),s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}}," void"),s("span",{style:{color:"#6F42C1","--shiki-dark":"#61AFEF"}}," set"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"()"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#E5C07B"}},"    lock"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"."),s("span",{style:{color:"#6F42C1","--shiki-dark":"#61AFEF"}},"lock"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"();")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A737D","--shiki-dark":"#7F848E","font-style":"inherit","--shiki-dark-font-style":"italic"}},"    // ...")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#E5C07B"}},"    lock"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"."),s("span",{style:{color:"#6F42C1","--shiki-dark":"#61AFEF"}},"unlock"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"();")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"  }")]),a(`
`),s("span",{class:"line"}),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"  @"),s("span",{style:{color:"#D73A49","--shiki-dark":"#E5C07B"}},"Override")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}},"  public"),s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}}," void"),s("span",{style:{color:"#6F42C1","--shiki-dark":"#61AFEF"}}," run"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"()"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6F42C1","--shiki-dark":"#61AFEF"}},"    get"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"();")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"  }")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"}")]),a(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),B=s("div",{class:"language-java line-numbers-mode","data-ext":"java","data-title":"java"},[s("pre",{class:"shiki shiki-themes github-light one-dark-pro",style:{"background-color":"#fff","--shiki-dark-bg":"#282c34",color:"#24292e","--shiki-dark":"#abb2bf"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}},"public"),s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}}," class"),s("span",{style:{color:"#6F42C1","--shiki-dark":"#E5C07B"}}," Test"),s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}}," implements"),s("span",{style:{color:"#6F42C1","--shiki-dark":"#E5C07B"}}," Runnable"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}},"  public"),s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}}," synchronized"),s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}}," void"),s("span",{style:{color:"#6F42C1","--shiki-dark":"#61AFEF"}}," get"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"()"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A737D","--shiki-dark":"#7F848E","font-style":"inherit","--shiki-dark-font-style":"italic"}},"    // ...")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6F42C1","--shiki-dark":"#61AFEF"}},"    set"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"();")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"  }")]),a(`
`),s("span",{class:"line"}),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}},"  public"),s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}}," synchronized"),s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}}," void"),s("span",{style:{color:"#6F42C1","--shiki-dark":"#61AFEF"}}," set"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"()"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A737D","--shiki-dark":"#7F848E","font-style":"inherit","--shiki-dark-font-style":"italic"}},"    // ...")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"  }")]),a(`
`),s("span",{class:"line"}),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"  @"),s("span",{style:{color:"#D73A49","--shiki-dark":"#E5C07B"}},"Override")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}},"  public"),s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}}," void"),s("span",{style:{color:"#6F42C1","--shiki-dark":"#61AFEF"}}," run"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"()"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6F42C1","--shiki-dark":"#61AFEF"}},"    get"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"();")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"  }")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"}")]),a(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),E=s("div",{class:"language-java line-numbers-mode","data-ext":"java","data-title":"java"},[s("pre",{class:"shiki shiki-themes github-light one-dark-pro",style:{"background-color":"#fff","--shiki-dark-bg":"#282c34",color:"#24292e","--shiki-dark":"#abb2bf"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}},"public"),s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}}," class"),s("span",{style:{color:"#6F42C1","--shiki-dark":"#E5C07B"}}," SpinLock1"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}},"  private"),s("span",{style:{color:"#24292E","--shiki-dark":"#E5C07B"}}," AtomicReference"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"<"),s("span",{style:{color:"#D73A49","--shiki-dark":"#E5C07B"}},"Thread"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},">"),s("span",{style:{color:"#24292E","--shiki-dark":"#E06C75"}}," owner "),s("span",{style:{color:"#D73A49","--shiki-dark":"#56B6C2"}},"="),s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}}," new"),s("span",{style:{color:"#24292E","--shiki-dark":"#E5C07B"}}," AtomicReference"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"<>"),s("span",{style:{color:"#24292E","--shiki-dark":"#E06C75"}},"()"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},";")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}},"  private"),s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}}," int"),s("span",{style:{color:"#24292E","--shiki-dark":"#E06C75"}}," count "),s("span",{style:{color:"#D73A49","--shiki-dark":"#56B6C2"}},"="),s("span",{style:{color:"#005CC5","--shiki-dark":"#D19A66"}}," 0"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},";")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}},"  public"),s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}}," void"),s("span",{style:{color:"#6F42C1","--shiki-dark":"#61AFEF"}}," lock"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"()"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#E5C07B"}},"    Thread"),s("span",{style:{color:"#24292E","--shiki-dark":"#E06C75"}}," current"),s("span",{style:{color:"#D73A49","--shiki-dark":"#56B6C2"}}," ="),s("span",{style:{color:"#24292E","--shiki-dark":"#E5C07B"}}," Thread"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"."),s("span",{style:{color:"#6F42C1","--shiki-dark":"#61AFEF"}},"currentThread"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"();")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}},"    if"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}}," (current "),s("span",{style:{color:"#D73A49","--shiki-dark":"#56B6C2"}},"=="),s("span",{style:{color:"#24292E","--shiki-dark":"#E5C07B"}}," owner"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"."),s("span",{style:{color:"#6F42C1","--shiki-dark":"#61AFEF"}},"get"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"()) {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"      count"),s("span",{style:{color:"#D73A49","--shiki-dark":"#ABB2BF"}},"++"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},";")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}},"      return"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},";")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"    }")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}},"    while"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"("),s("span",{style:{color:"#D73A49","--shiki-dark":"#56B6C2"}},"!"),s("span",{style:{color:"#24292E","--shiki-dark":"#E5C07B"}},"owner"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"."),s("span",{style:{color:"#6F42C1","--shiki-dark":"#61AFEF"}},"compareAndSet"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"("),s("span",{style:{color:"#005CC5","--shiki-dark":"#D19A66"}},"null"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},", current)) {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A737D","--shiki-dark":"#7F848E","font-style":"inherit","--shiki-dark-font-style":"italic"}},"      // wait ... or else cpu busy")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"    }")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"  }")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}},"  public"),s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}}," void"),s("span",{style:{color:"#6F42C1","--shiki-dark":"#61AFEF"}}," unlock"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"()"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#E5C07B"}},"    Thread"),s("span",{style:{color:"#24292E","--shiki-dark":"#E06C75"}}," current"),s("span",{style:{color:"#D73A49","--shiki-dark":"#56B6C2"}}," ="),s("span",{style:{color:"#24292E","--shiki-dark":"#E5C07B"}}," Thread"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"."),s("span",{style:{color:"#6F42C1","--shiki-dark":"#61AFEF"}},"currentThread"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"();")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}},"    if"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"(current "),s("span",{style:{color:"#D73A49","--shiki-dark":"#56B6C2"}},"=="),s("span",{style:{color:"#24292E","--shiki-dark":"#E5C07B"}}," owner"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"."),s("span",{style:{color:"#6F42C1","--shiki-dark":"#61AFEF"}},"get"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"()) {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}},"      if"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"(count"),s("span",{style:{color:"#D73A49","--shiki-dark":"#56B6C2"}},"!="),s("span",{style:{color:"#005CC5","--shiki-dark":"#D19A66"}},"0"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},") {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"        count"),s("span",{style:{color:"#D73A49","--shiki-dark":"#ABB2BF"}},"--"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},";")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"      } "),s("span",{style:{color:"#D73A49","--shiki-dark":"#C678DD"}},"else"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#E5C07B"}},"        owner"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"."),s("span",{style:{color:"#6F42C1","--shiki-dark":"#61AFEF"}},"compareAndSet"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"(current, "),s("span",{style:{color:"#005CC5","--shiki-dark":"#D19A66"}},"null"),s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},");")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"      }")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"    }")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"  }")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E","--shiki-dark":"#ABB2BF"}},"}")]),a(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),A=e('<h4 id="reentrantlock-使用" tabindex="-1"><a class="header-anchor" href="#reentrantlock-使用"><span>ReentrantLock 使用</span></a></h4><p>todo timeout</p><p>todo trylock —— 防止获取锁失败后一直等待，可以自定义获取锁失败后的处理</p><p>todo lockInterruptibly —— 等待过程中中断</p><h4 id="公平锁、非公平锁" tabindex="-1"><a class="header-anchor" href="#公平锁、非公平锁"><span>公平锁、非公平锁</span></a></h4><p>概念：</p><ul><li>非公平 —— 优先将锁给统一线程的任务 💡 非公平锁能减少线程上下文切换的开销，理论上性能更好，所以锁默认都是非公平的</li><li>公平 —— 不同线程获取锁机会一样</li></ul><p>e.g.</p><ul><li>synchronized 非公平</li><li>ReentrantLock 可公平、可非公平 <code>new ReentrantLock(true) ; // fair true/false 默认 false</code></li></ul><h2 id="生产者-消费者模型" tabindex="-1"><a class="header-anchor" href="#生产者-消费者模型"><span>生产者/消费者模型</span></a></h2><p>todo</p>',11);function u(F,v){const r=t("Tabs");return p(),c("div",null,[h,d(r,{id:"497",data:[{id:"ReentrantLock 示例"},{id:"synchronized 示例"},{id:"自定义"}]},{title0:n(({value:i,isActive:l})=>[a("ReentrantLock 示例")]),title1:n(({value:i,isActive:l})=>[a("synchronized 示例")]),title2:n(({value:i,isActive:l})=>[a("自定义")]),tab0:n(({value:i,isActive:l})=>[y]),tab1:n(({value:i,isActive:l})=>[B]),tab2:n(({value:i,isActive:l})=>[E]),_:1}),A])}const b=o(k,[["render",u],["__file","jdk-thread.html.vue"]]),D=JSON.parse('{"path":"/zh/dev-java-commonsense/jdk-thread.html","title":"JDK thread 功能","lang":"zh-CN","frontmatter":{"title":"JDK thread 功能","date":"2024-05-24T00:00:00.000Z","tag":["java","thread"],"order":66,"description":"概念 JUC JUC java.util.concurrent 缩写 并发场景进行多线程编程的工具类 进程、线程、协程 进程 —— 一个应用，系统资源分配单位 线程 —— 一个应用的其中一个任务，共享进程资源 协程/虚拟线程（Visual Thread） —— 在一个任务中，实现多任务有序的协作开展任务 一个线程中可以有多个虚拟线程 不由系统管理，由 ...","head":[["meta",{"property":"og:url","content":"https://lawsssscat.github.io/blog/zh/blog/zh/dev-java-commonsense/jdk-thread.html"}],["meta",{"property":"og:site_name","content":"个人博客"}],["meta",{"property":"og:title","content":"JDK thread 功能"}],["meta",{"property":"og:description","content":"概念 JUC JUC java.util.concurrent 缩写 并发场景进行多线程编程的工具类 进程、线程、协程 进程 —— 一个应用，系统资源分配单位 线程 —— 一个应用的其中一个任务，共享进程资源 协程/虚拟线程（Visual Thread） —— 在一个任务中，实现多任务有序的协作开展任务 一个线程中可以有多个虚拟线程 不由系统管理，由 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://s2.loli.net/2024/05/26/vlUnRbkdoXBuTNE.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-28T16:43:12.000Z"}],["meta",{"property":"article:author","content":"Steven"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"thread"}],["meta",{"property":"article:published_time","content":"2024-05-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-28T16:43:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JDK thread 功能\\",\\"image\\":[\\"https://s2.loli.net/2024/05/26/vlUnRbkdoXBuTNE.png\\"],\\"datePublished\\":\\"2024-05-24T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-28T16:43:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Steven\\",\\"url\\":\\"https://github.com/LawssssCat/\\"}]}"]]},"headers":[{"level":2,"title":"概念","slug":"概念","link":"#概念","children":[{"level":3,"title":"JUC","slug":"juc","link":"#juc","children":[]},{"level":3,"title":"进程、线程、协程","slug":"进程、线程、协程","link":"#进程、线程、协程","children":[]},{"level":3,"title":"并发、并行、串行","slug":"并发、并行、串行","link":"#并发、并行、串行","children":[]},{"level":3,"title":"线程数、CPU 的核心数","slug":"线程数、cpu-的核心数","link":"#线程数、cpu-的核心数","children":[]},{"level":3,"title":"时间片、上下文切换","slug":"时间片、上下文切换","link":"#时间片、上下文切换","children":[]}]},{"level":2,"title":"Thread API","slug":"thread-api","link":"#thread-api","children":[{"level":3,"title":"线程中断（interrupt）","slug":"线程中断-interrupt","link":"#线程中断-interrupt","children":[]},{"level":3,"title":"线程状态","slug":"线程状态","link":"#线程状态","children":[]},{"level":3,"title":"Callable、Future","slug":"callable、future","link":"#callable、future","children":[]},{"level":3,"title":"異常抛出时机","slug":"異常抛出时机","link":"#異常抛出时机","children":[]}]},{"level":2,"title":"ThreadPool API","slug":"threadpool-api","link":"#threadpool-api","children":[{"level":3,"title":"Executors","slug":"executors","link":"#executors","children":[]},{"level":3,"title":"非核心线程淘汰机制","slug":"非核心线程淘汰机制","link":"#非核心线程淘汰机制","children":[]}]},{"level":2,"title":"线程安全","slug":"线程安全","link":"#线程安全","children":[{"level":3,"title":"JMM 内存模型","slug":"jmm-内存模型","link":"#jmm-内存模型","children":[]},{"level":3,"title":"ThreadLocal","slug":"threadlocal","link":"#threadlocal","children":[]},{"level":3,"title":"原子类（atomic）","slug":"原子类-atomic","link":"#原子类-atomic","children":[]},{"level":3,"title":"ABA 问题","slug":"aba-问题","link":"#aba-问题","children":[]},{"level":3,"title":"锁","slug":"锁","link":"#锁","children":[]}]},{"level":2,"title":"生产者/消费者模型","slug":"生产者-消费者模型","link":"#生产者-消费者模型","children":[]}],"git":{"createdTime":1716767237000,"updatedTime":1716914592000,"contributors":[{"name":"lawsssscat","email":"18041500+LawssssCat@users.noreply.github.com","commits":2}]},"readingTime":{"minutes":10.32,"words":3097},"filePathRelative":"zh/dev-java-commonsense/jdk-thread.md","localizedDate":"2024年5月24日","excerpt":"<h2>概念</h2>\\n<h3>JUC</h3>\\n<p>JUC <code>java.util.concurrent</code> 缩写</p>\\n<p>并发场景进行多线程编程的工具类</p>\\n<h3>进程、线程、协程</h3>\\n<p><strong>进程</strong> —— 一个应用，系统资源分配单位</p>\\n<p><strong>线程</strong> —— 一个应用的其中一个任务，共享进程资源</p>\\n<p><strong>协程</strong>/<strong>虚拟线程（Visual Thread）</strong> —— 在一个任务中，实现多任务有序的协作开展任务</p>\\n<ul>\\n<li>一个线程中可以有多个虚拟线程</li>\\n<li>不由系统管理，由 jvm 管理</li>\\n<li>由于由 jvm 管理，完全在内存中进行状态切换，所以创建和销毁的开销小，更高效</li>\\n</ul>","autoDesc":true}');export{b as comp,D as data};
